{
	"openrpc": "1.2.4",
	"info": {
		"title": "Firebolt JSON-RPC API",
		"version": "1.5.0-next.9"
	},
	"methods": [
		{
			"name": "rpc.discover",
			"summary": "The OpenRPC schema for this JSON-RPC API",
			"params": [],
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:rpc:discover"
					]
				}
			],
			"result": {
				"name": "OpenRPC Schema",
				"schema": {
					"type": "object"
				}
			},
			"examples": [
				{
					"name": "Default",
					"params": [],
					"result": {
						"name": "schema",
						"value": {}
					}
				}
			]
		},
		{
			"name": "AcknowledgeChallenge.challenge",
			"summary": "Registers as a provider for when the user should be challenged in order to confirm access to a capability",
			"params": [
				{
					"name": "capability",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The capability that is being requested by the user to approve"
					}
				},
				{
					"name": "requestor",
					"required": true,
					"schema": {
						"description": "The identity of which app is requesting access to this capability",
						"$ref": "#/components/schemas/AcknowledgeChallenge.ChallengeRequestor"
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:usergrant:acknowledgechallenge",
					"x-allow-focus": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"$ref": "#/components/schemas/AcknowledgeChallenge.GrantResult"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:localization::postal-code"
						},
						{
							"name": "requestor",
							"value": {
								"id": "ReferenceApp",
								"name": "Firebolt Reference App"
							}
						}
					],
					"result": {
						"name": "result",
						"value": {
							"granted": true
						}
					}
				}
			]
		},
		{
			"name": "Capabilities.available",
			"tags": [
				{
					"name": "notifier",
					"x-event": "Capabilities.onAvailable"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:capabilities:info"
					]
				}
			],
			"summary": "Listens for all App permitted capabilities to become available.",
			"params": [
				{
					"name": "capability",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					}
				},
				{
					"name": "value",
					"summary": "Provides the capability info.",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/CapabilityInfo"
					}
				}
			],
			"examples": [
				{
					"name": "Platform token is available",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:token:platform"
						},
						{
							"name": "value",
							"value": {
								"capability": "xrn:firebolt:capability:token:platform",
								"supported": true,
								"available": true,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								},
								"details": [
									"unpermitted"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Capabilities.unavailable",
			"tags": [
				{
					"name": "notifier",
					"x-event": "Capabilities.onUnavailable"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:capabilities:info"
					]
				}
			],
			"summary": "Listens for all App permitted capabilities to become unavailable.",
			"params": [
				{
					"name": "capability",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					}
				},
				{
					"name": "value",
					"summary": "Provides the capability info.",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/CapabilityInfo"
					}
				}
			],
			"examples": [
				{
					"name": "Platform token is unavailable.",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:token:platform"
						},
						{
							"name": "value",
							"value": {
								"capability": "xrn:firebolt:capability:token:platform",
								"supported": true,
								"available": false,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								},
								"details": [
									"unavailable"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Capabilities.granted",
			"tags": [
				{
					"name": "notifier",
					"x-event": "Capabilities.onGranted"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:capabilities:info"
					]
				}
			],
			"summary": "Listens for all App permitted capabilities to become granted.",
			"params": [
				{
					"name": "role",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Role"
					}
				},
				{
					"name": "capability",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					}
				},
				{
					"name": "value",
					"summary": "Provides the capability info.",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/CapabilityInfo"
					}
				}
			],
			"examples": [
				{
					"name": "Postal code granted",
					"params": [
						{
							"name": "role",
							"value": "use"
						},
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:localization:postal-code"
						},
						{
							"name": "value",
							"value": {
								"capability": "xrn:firebolt:capability:localization:postal-code",
								"supported": true,
								"available": true,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "Capabilities.revoked",
			"tags": [
				{
					"name": "notifier",
					"x-event": "Capabilities.onRevoked"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:capabilities:info"
					]
				}
			],
			"summary": "Listens for all App permitted capabilities to become revoked.",
			"params": [
				{
					"name": "role",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Role"
					}
				},
				{
					"name": "capability",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					}
				},
				{
					"name": "value",
					"summary": "Provides the capability info.",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/CapabilityInfo"
					}
				}
			],
			"examples": [
				{
					"name": "Postal code revoked",
					"params": [
						{
							"name": "role",
							"value": "use"
						},
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:localization:postal-code"
						},
						{
							"name": "value",
							"value": {
								"capability": "xrn:firebolt:capability:localization:postal-code",
								"supported": true,
								"available": true,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								},
								"details": [
									"grantDenied"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Content.userInterest",
			"tags": [
				{
					"name": "notifier",
					"x-event": "Content.onUserInterest"
				},
				{
					"name": "capabilities",
					"x-provided-by": "Discovery.userInterest",
					"x-uses": [
						"xrn:firebolt:capability:discovery:interest"
					]
				}
			],
			"summary": "Provide information about the entity currently displayed or selected on the screen.",
			"description": "Provide information about the entity currently displayed or selected on the screen.",
			"params": [
				{
					"name": "interest",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/Content.InterestEvent"
					},
					"summary": "The EntityDetails data."
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "interest",
							"value": {
								"appId": "cool-app",
								"type": "interest",
								"reason": "playlist",
								"entity": {
									"identifiers": {
										"entityId": "345",
										"entityType": "program",
										"programType": "movie"
									},
									"info": {
										"title": "Cool Runnings",
										"synopsis": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pulvinar sapien et ligula ullamcorper malesuada proin libero nunc.",
										"releaseDate": "1993-01-01T00:00:00.000Z",
										"contentRatings": [
											{
												"scheme": "US-Movie",
												"rating": "PG"
											},
											{
												"scheme": "CA-Movie",
												"rating": "G"
											}
										]
									}
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "Device.deviceNameChanged",
			"tags": [
				{
					"name": "notifier",
					"x-event": "Device.onDeviceNameChanged"
				},
				{
					"name": "deprecated",
					"x-since": "0.6.0",
					"x-alternative": "Device.name()"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:name"
					]
				}
			],
			"summary": "Get the human readable name of the device",
			"params": [
				{
					"name": "value",
					"summary": "the device friendly-name",
					"schema": {
						"type": "string"
					}
				}
			],
			"examples": [
				{
					"name": "Getting the device name",
					"params": [
						{
							"name": "Default Result",
							"value": "Living Room"
						}
					]
				}
			]
		},
		{
			"name": "Discovery.navigateTo",
			"tags": [
				{
					"name": "notifier",
					"x-event": "Discovery.onNavigateTo"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:discovery:navigate-to"
					]
				}
			],
			"summary": "listen to `navigateTo` events",
			"params": [
				{
					"name": "value",
					"summary": "An object describing where in the app the user intends to navigate to",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/NavigationIntent"
					}
				}
			],
			"examples": [
				{
					"name": "Listening for `navigateTo` events",
					"params": [
						{
							"name": "event",
							"value": {
								"action": "search",
								"data": {
									"query": "a cool show"
								},
								"context": {
									"campaign": "unknown",
									"source": "voice"
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "Discovery.signIn",
			"tags": [
				{
					"name": "notifier",
					"x-event": "Discovery.onSignIn"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:discovery:sign-in-status"
					]
				}
			],
			"summary": "Listen to events from all apps that call Discovery.signIn",
			"params": [
				{
					"name": "event",
					"schema": {
						"type": "object",
						"properties": {
							"appId": {
								"type": "string"
							}
						},
						"required": [
							"appId"
						]
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "Default Event",
							"value": {
								"appId": "firecert"
							}
						}
					]
				}
			]
		},
		{
			"name": "Discovery.signOut",
			"tags": [
				{
					"name": "notifier",
					"x-event": "Discovery.onSignOut"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:discovery:sign-in-status"
					]
				}
			],
			"summary": "Listen to events from all apps that call Discovery.signOut",
			"params": [
				{
					"name": "event",
					"schema": {
						"type": "object",
						"properties": {
							"appId": {
								"type": "string"
							}
						},
						"required": [
							"appId"
						]
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "Default Event",
							"value": {
								"appId": "firecert"
							}
						}
					]
				}
			]
		},
		{
			"name": "Discovery.userInterest",
			"summary": "Send an entity that the user has expressed interest in to the platform.",
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:discovery:interest"
				}
			],
			"params": [
				{
					"name": "type",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/discovery#/definitions/InterestType"
					}
				},
				{
					"name": "reason",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/discovery#/definitions/InterestReason"
					}
				},
				{
					"name": "entity",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/EntityDetails"
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "type",
							"value": "interest"
						},
						{
							"name": "reason",
							"value": "playlist"
						},
						{
							"name": "entity",
							"value": {
								"identifiers": {
									"entityId": "345",
									"entityType": "program",
									"programType": "movie"
								},
								"info": {}
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "HDMIInput.connectionChanged",
			"tags": [
				{
					"name": "notifier",
					"x-event": "HDMIInput.onConnectionChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:inputs:hdmi"
					]
				}
			],
			"summary": "Notification for when any HDMI port has a connection physically engaged or disengaged.",
			"params": [
				{
					"name": "info",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/HDMIInput.ConnectionChangedInfo"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "info",
							"value": {
								"port": "HDMI1",
								"connected": true
							}
						}
					]
				}
			]
		},
		{
			"name": "HDMIInput.signalChanged",
			"tags": [
				{
					"name": "notifier",
					"x-event": "HDMIInput.onSignalChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:inputs:hdmi"
					]
				}
			],
			"summary": "Notification for when any HDMI port has it's signal status changed.",
			"params": [
				{
					"name": "info",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/HDMIInput.SignalChangedInfo"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "info",
							"value": {
								"port": "HDMI1",
								"signal": "stable"
							}
						}
					]
				}
			]
		},
		{
			"name": "HDMIInput.autoLowLatencyModeSignalChanged",
			"summary": "Notification for changes to ALLM status of any input device.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:inputs:hdmi"
					]
				},
				{
					"name": "notifier",
					"x-event": "HDMIInput.onAutoLowLatencyModeSignalChanged"
				}
			],
			"params": [
				{
					"name": "info",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/HDMIInput.AutoLowLatencyModeSignalChangedInfo"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "info",
							"value": {
								"port": "HDMI1",
								"autoLowLatencyModeSignalled": true
							}
						}
					]
				}
			]
		},
		{
			"name": "Keyboard.email",
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true
				}
			],
			"summary": "Prompt the user for their email address with a simplified list of choices.",
			"params": [
				{
					"name": "type",
					"summary": "Why the email is being requested, e.g. sign on or sign up",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/Keyboard.EmailUsage"
					}
				},
				{
					"name": "message",
					"summary": "The message to display while prompting",
					"required": false,
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "email",
				"summary": "the selected or entered email",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Prompt the user to select or type an email address",
					"params": [
						{
							"name": "type",
							"value": "signIn"
						},
						{
							"name": "message",
							"value": "Enter your email to sign into this app"
						}
					],
					"result": {
						"name": "Default Result",
						"value": "user@domain.com"
					}
				},
				{
					"name": "Prompt the user to type an email address to sign up",
					"params": [
						{
							"name": "type",
							"value": "signUp"
						},
						{
							"name": "message",
							"value": "Enter your email to sign up for this app"
						}
					],
					"result": {
						"name": "Default Result",
						"value": "user@domain.com"
					}
				}
			]
		},
		{
			"name": "Keyboard.password",
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true
				}
			],
			"summary": "Show the password entry keyboard, with typing obfuscated from visibility",
			"params": [
				{
					"name": "message",
					"summary": "The message to display while prompting",
					"required": false,
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "value",
				"summary": "the selected or entered password",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Prompt the user to enter their password",
					"params": [
						{
							"name": "message",
							"value": "Enter your password"
						}
					],
					"result": {
						"name": "Default Result",
						"value": "abc123"
					}
				}
			]
		},
		{
			"name": "Keyboard.standard",
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:input:keyboard",
					"x-allow-focus": true
				}
			],
			"summary": "Show the standard platform keyboard, and return the submitted value",
			"params": [
				{
					"name": "message",
					"summary": "The message to display while prompting",
					"required": true,
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "value",
				"summary": "the selected or entered text",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Prompt the user for an arbitrary string",
					"params": [
						{
							"name": "message",
							"value": "Enter the name you'd like to associate with this device"
						}
					],
					"result": {
						"name": "Default Result",
						"value": "Living Room"
					}
				}
			]
		},
		{
			"name": "Lifecycle.inactive",
			"tags": [
				{
					"name": "notifier",
					"x-event": "Lifecycle.onInactive"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"summary": "Listen to the inactive event",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/Lifecycle.LifecycleEvent"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": {
								"state": "inactive",
								"previous": "initializing"
							}
						}
					]
				}
			]
		},
		{
			"name": "Lifecycle.foreground",
			"tags": [
				{
					"name": "notifier",
					"x-event": "Lifecycle.onForeground"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"summary": "Listen to the foreground event",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/Lifecycle.LifecycleEvent"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "Default Result",
							"value": {
								"state": "foreground",
								"previous": "inactive"
							}
						}
					]
				},
				{
					"name": "Move to foreground via remote branded buton",
					"params": [
						{
							"name": "value",
							"value": {
								"state": "foreground",
								"previous": "inactive",
								"source": "remote"
							}
						}
					]
				}
			]
		},
		{
			"name": "Lifecycle.background",
			"tags": [
				{
					"name": "notifier",
					"x-event": "Lifecycle.onBackground"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"summary": "Listen to the background event",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/Lifecycle.LifecycleEvent"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": {
								"state": "background",
								"previous": "foreground"
							}
						}
					]
				}
			]
		},
		{
			"name": "Lifecycle.suspended",
			"tags": [
				{
					"name": "notifier",
					"x-event": "Lifecycle.onSuspended"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"summary": "Listen to the suspended event",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/Lifecycle.LifecycleEvent"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": {
								"state": "suspended",
								"previous": "inactive"
							}
						}
					]
				}
			]
		},
		{
			"name": "Lifecycle.unloading",
			"tags": [
				{
					"name": "notifier",
					"x-event": "Lifecycle.onUnloading"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"summary": "Listen to the unloading event",
			"params": [
				{
					"name": "value",
					"schema": {
						"$ref": "#/components/schemas/Lifecycle.LifecycleEvent"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "value",
							"value": {
								"state": "unloading",
								"previous": "inactive"
							}
						}
					]
				}
			]
		},
		{
			"name": "PinChallenge.challenge",
			"summary": "Registers as a provider for when the user should be challenged in order to confirm access to a capability through a pin prompt",
			"params": [
				{
					"name": "requestor",
					"required": true,
					"schema": {
						"description": "The identity of which app is requesting access to this capability",
						"$ref": "#/components/schemas/PinChallenge.ChallengeRequestor"
					}
				},
				{
					"name": "pinSpace",
					"required": true,
					"schema": {
						"type": "string",
						"description": "The pin space that this challenge is for",
						"enum": [
							"purchase",
							"content"
						]
					}
				},
				{
					"name": "capability",
					"required": false,
					"schema": {
						"type": "string",
						"description": "The capability that is gated by a pin challenge"
					}
				}
			],
			"tags": [
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:usergrant:pinchallenge",
					"x-allow-focus": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"$ref": "#/components/schemas/PinChallenge.PinChallengeResult"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:commerce::purchase"
						},
						{
							"name": "requestor",
							"value": {
								"id": "ReferenceApp",
								"name": "Firebolt Reference App"
							}
						},
						{
							"name": "pinSpace",
							"value": "purchase"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"granted": true,
							"reason": "correctPin"
						}
					}
				}
			]
		},
		{
			"name": "SecondScreen.launchRequest",
			"tags": [
				{
					"name": "notifier",
					"x-event": "SecondScreen.onLaunchRequest"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:protocol:dial"
					]
				}
			],
			"summary": "Listen to the launchRequest event",
			"params": [
				{
					"name": "launchRequestEvent",
					"summary": "Dispatched when a second screen device on the local network has requested this app to be launched",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/secondscreen#/definitions/SecondScreenEvent"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "launchRequestEvent",
							"value": {
								"type": "dial",
								"version": "1.7",
								"data": "{\"code\":\"AQDPQZiQcb3KQ7gY7yy5tHTMbbkGHR9Zjp-KL53H3eKBZIeAt7O9UKYPu6B21l2UZVmIqkFXDXBmXvK4g2e3EgZtjMNmKPsTltgnRl95DImtOXjSpWtTjSaOkW4w1kZKUTwLKdwVWTzBVH8ERHorvLU6vCGOVHxXt65LNwdl5HKRweShVC1V9QsyvRnQS61ov0UclmrH_xZML2Bt-Q-rZFjey5MjwupIb4x4f53XUJMhjHpDHoIUKrjpdPDQvK2a\",\"friendlyName\":\"Operator_TX061AEI\",\"UDN\":\"608fef11-2800-482a-962b-23a6690c93c1\"}"
							}
						}
					]
				}
			]
		},
		{
			"name": "SecondScreen.closeRequest",
			"tags": [
				{
					"name": "notifier",
					"x-event": "SecondScreen.onCloseRequest"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:protocol:dial"
					]
				}
			],
			"summary": "Listen to the closeRequest event",
			"params": [
				{
					"name": "closeRequestEvent",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/secondscreen#/definitions/SecondScreenEvent"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "closeRequestEvent",
							"value": {
								"type": "dial",
								"version": "1.7"
							}
						}
					]
				}
			]
		},
		{
			"name": "Advertising.skipRestrictionChanged",
			"summary": "Set the value for AdPolicy.skipRestriction",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Advertising.skipRestriction",
					"x-event": "Advertising.onSkipRestrictionChanged"
				},
				{
					"name": "capabilities",
					"x-manages": [
						"xrn:firebolt:capability:advertising:configuration"
					]
				}
			],
			"params": [
				{
					"name": "result",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/advertising#/definitions/SkipRestriction"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "result",
							"value": "none"
						}
					]
				},
				{
					"name": "Additional Example",
					"params": [
						{
							"name": "result",
							"value": "all"
						}
					]
				}
			]
		},
		{
			"name": "AudioDescriptions.enabledChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "AudioDescriptions.enabled",
					"x-event": "AudioDescriptions.onEnabledChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:audiodescriptions"
					]
				}
			],
			"summary": "Whether or not audio-descriptions are enabled.",
			"params": [
				{
					"name": "enabled",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "enabled",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "enabled",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "ClosedCaptions.enabledChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "ClosedCaptions.enabled",
					"x-event": "ClosedCaptions.onEnabledChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "Whether or not closed-captions are enabled.",
			"params": [
				{
					"name": "enabled",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "enabled",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "enabled",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "ClosedCaptions.fontFamilyChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "ClosedCaptions.fontFamily",
					"x-event": "ClosedCaptions.onFontFamilyChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The preferred font family for displaying closed-captions.",
			"params": [
				{
					"name": "family",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/FontFamily"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "family",
							"value": "monospaced_sanserif"
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "family",
							"value": "cursive"
						}
					]
				},
				{
					"name": "Default example #3",
					"params": [
						{
							"name": "family",
							"value": null
						}
					]
				}
			]
		},
		{
			"name": "ClosedCaptions.fontSizeChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "ClosedCaptions.fontSize",
					"x-event": "ClosedCaptions.onFontSizeChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The preferred font size for displaying closed-captions.",
			"params": [
				{
					"name": "size",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/FontSize"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "size",
							"value": 1
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "size",
							"value": 1
						}
					]
				},
				{
					"name": "Default example #3",
					"params": [
						{
							"name": "size",
							"value": null
						}
					]
				}
			]
		},
		{
			"name": "ClosedCaptions.fontColorChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "ClosedCaptions.fontColor",
					"x-event": "ClosedCaptions.onFontColorChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The preferred font color for displaying closed-captions.",
			"params": [
				{
					"name": "color",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Color"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "color",
							"value": "#ffffff"
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "color",
							"value": "#000000"
						}
					]
				},
				{
					"name": "Default example #3",
					"params": [
						{
							"name": "color",
							"value": null
						}
					]
				}
			]
		},
		{
			"name": "ClosedCaptions.fontEdgeChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "ClosedCaptions.fontEdge",
					"x-event": "ClosedCaptions.onFontEdgeChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The preferred font edge style for displaying closed-captions.",
			"params": [
				{
					"name": "edge",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/FontEdge"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "edge",
							"value": "none"
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "edge",
							"value": "uniform"
						}
					]
				},
				{
					"name": "Default example #3",
					"params": [
						{
							"name": "edge",
							"value": null
						}
					]
				}
			]
		},
		{
			"name": "ClosedCaptions.fontEdgeColorChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "ClosedCaptions.fontEdgeColor",
					"x-event": "ClosedCaptions.onFontEdgeColorChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The preferred font edge color for displaying closed-captions.",
			"params": [
				{
					"name": "color",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Color"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "color",
							"value": "#000000"
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "color",
							"value": "#ffffff"
						}
					]
				},
				{
					"name": "Default example #3",
					"params": [
						{
							"name": "color",
							"value": null
						}
					]
				}
			]
		},
		{
			"name": "ClosedCaptions.fontOpacityChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "ClosedCaptions.fontOpacity",
					"x-event": "ClosedCaptions.onFontOpacityChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The preferred opacity for displaying closed-captions characters.",
			"params": [
				{
					"name": "opacity",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Opacity"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "opacity",
							"value": 99
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "opacity",
							"value": 100
						}
					]
				},
				{
					"name": "Default example #3",
					"params": [
						{
							"name": "opacity",
							"value": null
						}
					]
				}
			]
		},
		{
			"name": "ClosedCaptions.backgroundColorChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "ClosedCaptions.backgroundColor",
					"x-event": "ClosedCaptions.onBackgroundColorChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The preferred background color for displaying closed-captions, .",
			"params": [
				{
					"name": "color",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Color"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "color",
							"value": "#000000"
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "color",
							"value": "#ffffff"
						}
					]
				},
				{
					"name": "Default example #3",
					"params": [
						{
							"name": "color",
							"value": null
						}
					]
				}
			]
		},
		{
			"name": "ClosedCaptions.backgroundOpacityChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "ClosedCaptions.backgroundOpacity",
					"x-event": "ClosedCaptions.onBackgroundOpacityChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The preferred opacity for displaying closed-captions backgrounds.",
			"params": [
				{
					"name": "opacity",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Opacity"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "opacity",
							"value": 99
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "opacity",
							"value": 100
						}
					]
				},
				{
					"name": "Default example #3",
					"params": [
						{
							"name": "opacity",
							"value": null
						}
					]
				}
			]
		},
		{
			"name": "ClosedCaptions.textAlignChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "ClosedCaptions.textAlign",
					"x-event": "ClosedCaptions.onTextAlignChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The preferred horizontal alignment for displaying closed-captions characters.",
			"params": [
				{
					"name": "alignment",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/HorizontalAlignment"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "alignment",
							"value": "center"
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "alignment",
							"value": "left"
						}
					]
				},
				{
					"name": "Default example #3",
					"params": [
						{
							"name": "alignment",
							"value": null
						}
					]
				}
			]
		},
		{
			"name": "ClosedCaptions.textAlignVerticalChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "ClosedCaptions.textAlignVertical",
					"x-event": "ClosedCaptions.onTextAlignVerticalChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The preferred horizontal alignment for displaying closed-captions characters.",
			"params": [
				{
					"name": "alignment",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/VerticalAlignment"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "alignment",
							"value": "middle"
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "alignment",
							"value": "top"
						}
					]
				},
				{
					"name": "Default example #3",
					"params": [
						{
							"name": "alignment",
							"value": null
						}
					]
				}
			]
		},
		{
			"name": "ClosedCaptions.windowColorChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "ClosedCaptions.windowColor",
					"x-event": "ClosedCaptions.onWindowColorChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The preferred window color for displaying closed-captions, .",
			"params": [
				{
					"name": "color",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Color"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "color",
							"value": "#000000"
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "color",
							"value": "white"
						}
					]
				},
				{
					"name": "Default example #3",
					"params": [
						{
							"name": "color",
							"value": null
						}
					]
				}
			]
		},
		{
			"name": "ClosedCaptions.windowOpacityChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "ClosedCaptions.windowOpacity",
					"x-event": "ClosedCaptions.onWindowOpacityChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"summary": "The preferred window opacity for displaying closed-captions backgrounds.",
			"params": [
				{
					"name": "opacity",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Opacity"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "opacity",
							"value": 99
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "opacity",
							"value": 100
						}
					]
				},
				{
					"name": "Default example #3",
					"params": [
						{
							"name": "opacity",
							"value": null
						}
					]
				}
			]
		},
		{
			"name": "ClosedCaptions.preferredLanguagesChanged",
			"summary": "A prioritized list of ISO 639-2/B codes for the preferred closed captions languages on this device.",
			"params": [
				{
					"name": "languages",
					"summary": "the preferred closed captions languages",
					"schema": {
						"type": "array",
						"items": {
							"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/ISO639_2Language"
						}
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "ClosedCaptions.preferredLanguages",
					"x-event": "ClosedCaptions.onPreferredLanguagesChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "Default Result",
							"value": [
								"spa",
								"eng"
							]
						}
					]
				},
				{
					"name": "Default Example #2",
					"params": [
						{
							"name": "Default Result",
							"value": [
								"eng",
								"spa"
							]
						}
					]
				}
			]
		},
		{
			"name": "Device.nameChanged",
			"summary": "The human readable name of the device",
			"params": [
				{
					"name": "value",
					"summary": "the device friendly-name",
					"schema": {
						"type": "string"
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Device.name",
					"x-event": "Device.onNameChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:name"
					]
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "Default Result",
							"value": "Living Room"
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "Default Result",
							"value": "Kitchen"
						}
					]
				}
			]
		},
		{
			"name": "HDMIInput.lowLatencyModeChanged",
			"summary": "Property for the low latency mode setting.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:inputs:hdmi"
					]
				},
				{
					"name": "notifier",
					"x-notifier-for": "HDMIInput.lowLatencyMode",
					"x-event": "HDMIInput.onLowLatencyModeChanged"
				}
			],
			"params": [
				{
					"name": "enabled",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "enabled",
							"value": true
						}
					]
				},
				{
					"name": "Default Example #2",
					"params": [
						{
							"name": "enabled",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "HDMIInput.autoLowLatencyModeCapableChanged",
			"summary": "Property for each port auto low latency mode setting.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:inputs:hdmi"
					]
				},
				{
					"name": "notifier",
					"x-subscriber-type": "global",
					"x-notifier-for": "HDMIInput.autoLowLatencyModeCapable",
					"x-event": "HDMIInput.onAutoLowLatencyModeCapableChanged"
				}
			],
			"params": [
				{
					"name": "info",
					"schema": {
						"$ref": "#/components/schemas/HDMIInput.AutoLowLatencyModeCapableChangedInfo"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "info",
							"value": {
								"port": "HDMI1",
								"enabled": true
							}
						}
					]
				},
				{
					"name": "Default Example #2",
					"params": [
						{
							"name": "info",
							"value": {
								"port": "HDMI1",
								"enabled": false
							}
						}
					]
				}
			]
		},
		{
			"name": "HDMIInput.edidVersionChanged",
			"summary": "Property for each port's active EDID version.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:inputs:hdmi"
					]
				},
				{
					"name": "notifier",
					"x-notifier-for": "HDMIInput.edidVersion",
					"x-event": "HDMIInput.onEdidVersionChanged"
				}
			],
			"params": [
				{
					"name": "port",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/HDMIInput.HDMIPortId"
					}
				},
				{
					"name": "edidVersion",
					"schema": {
						"$ref": "#/components/schemas/HDMIInput.EDIDVersion"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "port",
							"value": "HDMI1"
						},
						{
							"name": "edidVersion",
							"value": "2.0"
						}
					]
				},
				{
					"name": "Default Example #2",
					"params": [
						{
							"name": "port",
							"value": "HDMI1"
						},
						{
							"name": "edidVersion",
							"value": "1.4"
						}
					]
				}
			]
		},
		{
			"name": "Localization.localityChanged",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:locality"
					]
				},
				{
					"name": "notifier",
					"x-notifier-for": "Localization.locality",
					"x-event": "Localization.onLocalityChanged"
				}
			],
			"summary": "Get the locality/city the device is located in",
			"params": [
				{
					"name": "locality",
					"summary": "the device city",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/Locality"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "Default Result",
							"value": "Philadelphia"
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "Default Result",
							"value": "Rockville"
						}
					]
				}
			]
		},
		{
			"name": "Localization.postalCodeChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Localization.postalCode",
					"x-event": "Localization.onPostalCodeChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:postal-code"
					]
				}
			],
			"summary": "Get the postal code the device is located in",
			"params": [
				{
					"name": "postalCode",
					"summary": "the device postal code",
					"schema": {
						"type": "string"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "Default Result",
							"value": "19103"
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "Default Result",
							"value": "20850"
						}
					]
				}
			]
		},
		{
			"name": "Localization.countryCodeChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Localization.countryCode",
					"x-event": "Localization.onCountryCodeChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:country-code"
					]
				}
			],
			"summary": "Get the ISO 3166-1 alpha-2 code for the country device is located in",
			"params": [
				{
					"name": "code",
					"summary": "the device country code",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/CountryCode"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "Default Result",
							"value": "US"
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "Default Result",
							"value": "UK"
						}
					]
				}
			]
		},
		{
			"name": "Localization.languageChanged",
			"summary": "Get the ISO 639 1/2 code for the preferred language",
			"params": [
				{
					"name": "lang",
					"summary": "the device language",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/Language"
					}
				}
			],
			"tags": [
				{
					"name": "deprecated",
					"x-since": "0.17.0",
					"x-alternative": "Localization.locale"
				},
				{
					"name": "notifier",
					"x-notifier-for": "Localization.language",
					"x-event": "Localization.onLanguageChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:language"
					]
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "Default Result",
							"value": "en"
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "Default Result",
							"value": "es"
						}
					]
				}
			]
		},
		{
			"name": "Localization.preferredAudioLanguagesChanged",
			"summary": "A prioritized list of ISO 639 1/2 codes for the preferred audio languages on this device.",
			"params": [
				{
					"name": "languages",
					"summary": "the preferred audio languages",
					"schema": {
						"type": "array",
						"items": {
							"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/ISO639_2Language"
						}
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Localization.preferredAudioLanguages",
					"x-event": "Localization.onPreferredAudioLanguagesChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:language"
					]
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "Default Result",
							"value": [
								"spa",
								"eng"
							]
						}
					]
				},
				{
					"name": "Default Example #2",
					"params": [
						{
							"name": "Default Result",
							"value": [
								"eng",
								"spa"
							]
						}
					]
				}
			]
		},
		{
			"name": "Localization.localeChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Localization.locale",
					"x-event": "Localization.onLocaleChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:locale"
					]
				}
			],
			"summary": "Get the *full* BCP 47 code, including script, region, variant, etc., for the preferred langauage/locale",
			"params": [
				{
					"name": "locale",
					"summary": "the device locale",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/Locale"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "Default Result",
							"value": "en-US"
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "Default Result",
							"value": "es-US"
						}
					]
				}
			]
		},
		{
			"name": "Localization.timeZoneChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Localization.timeZone",
					"x-event": "Localization.onTimeZoneChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:time-zone"
					]
				}
			],
			"summary": "Set the IANA timezone for the device",
			"params": [
				{
					"name": "result",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/TimeZone"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "Default Result",
							"value": "America/New_York"
						}
					]
				},
				{
					"name": "Additional Example",
					"params": [
						{
							"name": "Default Result",
							"value": "America/Los_Angeles"
						}
					]
				}
			]
		},
		{
			"name": "Privacy.allowResumePointsChanged",
			"tags": [
				{
					"name": "notifier",
					"x-allow-value": true,
					"x-notifier-for": "Privacy.allowResumePoints",
					"x-event": "Privacy.onAllowResumePointsChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows resume points for content to show in the main experience",
			"params": [
				{
					"name": "allow",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "allow",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "allow",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "Privacy.allowUnentitledResumePointsChanged",
			"tags": [
				{
					"name": "notifier",
					"x-allow-value": true,
					"x-notifier-for": "Privacy.allowUnentitledResumePoints",
					"x-event": "Privacy.onAllowUnentitledResumePointsChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows resume points for content from unentitled providers to show in the main experience",
			"params": [
				{
					"name": "allow",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "allow",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "allow",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "Privacy.allowWatchHistoryChanged",
			"tags": [
				{
					"name": "notifier",
					"x-allow-value": true,
					"x-notifier-for": "Privacy.allowWatchHistory",
					"x-event": "Privacy.onAllowWatchHistoryChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their watch history from all sources to show in the main experience",
			"params": [
				{
					"name": "allow",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "allow",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "allow",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "Privacy.allowProductAnalyticsChanged",
			"tags": [
				{
					"name": "notifier",
					"x-allow-value": true,
					"x-notifier-for": "Privacy.allowProductAnalytics",
					"x-event": "Privacy.onAllowProductAnalyticsChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their usage data can be used for analytics about the product",
			"params": [
				{
					"name": "allow",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "allow",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "allow",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "Privacy.allowPersonalizationChanged",
			"tags": [
				{
					"name": "notifier",
					"x-allow-value": true,
					"x-notifier-for": "Privacy.allowPersonalization",
					"x-event": "Privacy.onAllowPersonalizationChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their usage data to be used for personalization and recommendations",
			"params": [
				{
					"name": "allow",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "allow",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "allow",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "Privacy.allowUnentitledPersonalizationChanged",
			"tags": [
				{
					"name": "notifier",
					"x-allow-value": true,
					"x-notifier-for": "Privacy.allowUnentitledPersonalization",
					"x-event": "Privacy.onAllowUnentitledPersonalizationChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their usage data to be used for personalization and recommendations for unentitled content",
			"params": [
				{
					"name": "allow",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "allow",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "allow",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "Privacy.allowRemoteDiagnosticsChanged",
			"tags": [
				{
					"name": "notifier",
					"x-allow-value": true,
					"x-notifier-for": "Privacy.allowRemoteDiagnostics",
					"x-event": "Privacy.onAllowRemoteDiagnosticsChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their personal data to be included in diagnostic telemetry. This also allows whether device logs can be remotely accessed from the client device",
			"params": [
				{
					"name": "allow",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "allow",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "allow",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "Privacy.allowPrimaryContentAdTargetingChanged",
			"tags": [
				{
					"name": "notifier",
					"x-allow-value": true,
					"x-notifier-for": "Privacy.allowPrimaryContentAdTargeting",
					"x-event": "Privacy.onAllowPrimaryContentAdTargetingChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows ads to be targeted to the user while watching content in the primary experience",
			"params": [
				{
					"name": "allow",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "allow",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "allow",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "Privacy.allowPrimaryBrowseAdTargetingChanged",
			"tags": [
				{
					"name": "notifier",
					"x-allow-value": true,
					"x-notifier-for": "Privacy.allowPrimaryBrowseAdTargeting",
					"x-event": "Privacy.onAllowPrimaryBrowseAdTargetingChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows ads to be targeted to the user while browsing in the primary experience",
			"params": [
				{
					"name": "allow",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "allow",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "allow",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "Privacy.allowAppContentAdTargetingChanged",
			"tags": [
				{
					"name": "notifier",
					"x-allow-value": true,
					"x-notifier-for": "Privacy.allowAppContentAdTargeting",
					"x-event": "Privacy.onAllowAppContentAdTargetingChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows ads to be targeted to the user while watching content in apps",
			"params": [
				{
					"name": "allow",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "allow",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "allow",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "Privacy.allowACRCollectionChanged",
			"tags": [
				{
					"name": "notifier",
					"x-allow-value": true,
					"x-notifier-for": "Privacy.allowACRCollection",
					"x-event": "Privacy.onAllowACRCollectionChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows their automatic content recognition data to be collected",
			"params": [
				{
					"name": "allow",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "allow",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "allow",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "Privacy.allowCameraAnalyticsChanged",
			"tags": [
				{
					"name": "notifier",
					"x-allow-value": true,
					"x-notifier-for": "Privacy.allowCameraAnalytics",
					"x-event": "Privacy.onAllowCameraAnalyticsChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:settings"
					]
				}
			],
			"summary": "Whether the user allows data from their camera to be used for Product Analytics",
			"params": [
				{
					"name": "allow",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "allow",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "allow",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "VoiceGuidance.enabledChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "VoiceGuidance.enabled",
					"x-event": "VoiceGuidance.onEnabledChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"summary": "Whether or not voice-guidance is enabled.",
			"params": [
				{
					"name": "enabled",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "enabled",
							"value": true
						}
					]
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "enabled",
							"value": false
						}
					]
				}
			]
		},
		{
			"name": "VoiceGuidance.speedChanged",
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "VoiceGuidance.speed",
					"x-event": "VoiceGuidance.onSpeedChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"summary": "The speed at which voice guidance speech will be read back to the user.",
			"params": [
				{
					"name": "speed",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/VoiceSpeed"
					}
				}
			],
			"examples": [
				{
					"name": "Voice guidance speed to 1",
					"params": [
						{
							"name": "speed",
							"value": 1
						}
					]
				},
				{
					"name": "Voice guidance speed to 2",
					"params": [
						{
							"name": "speed",
							"value": 2
						}
					]
				}
			]
		},
		{
			"name": "Accessibility.closedCaptionsSettingsChanged",
			"summary": "Get the user's preferred closed-captions settings",
			"params": [
				{
					"name": "closedCaptionsSettings",
					"summary": "the closed captions settings",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/ClosedCaptionsSettings"
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Accessibility.closedCaptionsSettings",
					"x-event": "Accessibility.onClosedCaptionsSettingsChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the closed captions settings",
					"params": [
						{
							"name": "settings",
							"value": {
								"enabled": true,
								"styles": {
									"fontFamily": "monospaced_sanserif",
									"fontSize": 1,
									"fontColor": "#ffffff",
									"fontEdge": "none",
									"fontEdgeColor": "#7F7F7F",
									"fontOpacity": 100,
									"backgroundColor": "#000000",
									"backgroundOpacity": 100,
									"textAlign": "center",
									"textAlignVertical": "middle",
									"windowColor": "white",
									"windowOpacity": 50
								},
								"preferredLanguages": [
									"eng",
									"spa"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Accessibility.voiceGuidanceSettingsChanged",
			"summary": "Get the user's preferred voice guidance settings",
			"params": [
				{
					"name": "settings",
					"summary": "the voice guidance settings",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/VoiceGuidanceSettings"
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Accessibility.voiceGuidanceSettings",
					"x-event": "Accessibility.onVoiceGuidanceSettingsChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the voice guidance settings",
					"params": [
						{
							"name": "Default Result",
							"value": {
								"enabled": true,
								"speed": 2
							}
						}
					]
				}
			]
		},
		{
			"name": "Accessibility.audioDescriptionSettingsChanged",
			"summary": "Get the user's preferred audio description settings",
			"params": [
				{
					"name": "settings",
					"summary": "the audio description settings",
					"schema": {
						"$ref": "#/components/schemas/Accessibility.AudioDescriptionSettings"
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Accessibility.audioDescriptionSettings",
					"x-event": "Accessibility.onAudioDescriptionSettingsChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:audiodescriptions"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the audio description settings",
					"params": [
						{
							"name": "Default Result",
							"value": {
								"enabled": true
							}
						}
					]
				}
			]
		},
		{
			"name": "Advertising.policyChanged",
			"summary": "Get the advertising privacy and playback policy",
			"params": [
				{
					"name": "adPolicy",
					"summary": "the ad policy",
					"schema": {
						"$ref": "#/components/schemas/Advertising.AdPolicy"
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Advertising.policy",
					"x-event": "Advertising.onPolicyChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:advertising",
						"xrn:firebolt:capability:advertising:configuration"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the advertising policy settings",
					"params": [
						{
							"name": "Default Result",
							"value": {
								"skipRestriction": "adsUnwatched",
								"limitAdTracking": false
							}
						}
					]
				}
			]
		},
		{
			"name": "Device.hdcpChanged",
			"summary": "Get the negotiated HDCP profiles for a connected device. \n\n For devices that do not require additional connections (e.g. panels), `true` will be returned for all profiles.",
			"params": [
				{
					"name": "negotiatedHdcpVersions",
					"summary": "the negotiated HDCP versions",
					"schema": {
						"$ref": "#/components/schemas/Device.HDCPVersionMap"
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Device.hdcp",
					"x-event": "Device.onHdcpChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the negotiated HDCP versions",
					"params": [
						{
							"name": "Default Result",
							"value": {
								"hdcp1.4": true,
								"hdcp2.2": true
							}
						}
					]
				}
			]
		},
		{
			"name": "Device.hdrChanged",
			"summary": "Get the negotiated HDR formats for the connected display and device",
			"params": [
				{
					"name": "negotiatedHdrFormats",
					"summary": "the negotiated HDR formats",
					"schema": {
						"$ref": "#/components/schemas/Device.HDRFormatMap"
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Device.hdr",
					"x-event": "Device.onHdrChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the negotiated HDR formats",
					"params": [
						{
							"name": "Default Result",
							"value": {
								"hdr10": true,
								"hdr10Plus": true,
								"dolbyVision": true,
								"hlg": true
							}
						}
					]
				}
			]
		},
		{
			"name": "Device.audioChanged",
			"summary": "Get the supported audio profiles for the connected devices. \n\n It is not recommended to use this API for visual badging on content within your app since this does not reflect the settings of the user.",
			"params": [
				{
					"name": "supportedAudioProfiles",
					"summary": "the supported audio profiles",
					"schema": {
						"$ref": "#/components/schemas/Device.AudioProfiles"
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Device.audio",
					"x-event": "Device.onAudioChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the supported audio profiles",
					"params": [
						{
							"name": "Default Result",
							"value": {
								"stereo": true,
								"dolbyDigital5.1": true,
								"dolbyDigital5.1+": true,
								"dolbyAtmos": true
							}
						}
					]
				}
			]
		},
		{
			"name": "Device.screenResolutionChanged",
			"summary": "Get the resolution for the graphical surface of the app. \n\nThe pairs returned will be of a [width, height] format and will correspond to the following values: \n\nNTSC Standard Definition (SD): [720, 480] \n\nPAL Standard Definition (SD): [720, 576] \n\nHigh Definition (HD): [1280, 720] \n\nFull HD (FHD): [1920, 1080]\n\n4K Ultra High Definition (UHD): [3840, 2160] \n\n**Deprecated:** Use non-Firebolt APIs specific to your platform, e.g. W3C APIs",
			"params": [
				{
					"name": "screenResolution",
					"summary": "the resolution",
					"schema": {
						"$ref": "#/components/schemas/Device.Resolution"
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Device.screenResolution",
					"x-event": "Device.onScreenResolutionChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				},
				{
					"name": "deprecated",
					"x-alternative": "Use non-Firebolt APIs specific to your platform, e.g. W3C APIs",
					"x-since": "1.4.0"
				}
			],
			"examples": [
				{
					"name": "Getting the screen resolution",
					"params": [
						{
							"name": "Default Result",
							"value": [
								1920,
								1080
							]
						}
					]
				}
			]
		},
		{
			"name": "Device.videoResolutionChanged",
			"summary": "Get the maximum supported video resolution of the currently connected device and display. \n\nThe pairs returned will be of a [width, height] format and will correspond to the following values: \n\nNTSC Standard Definition (SD): [720, 480] \n\nPAL Standard Definition (SD): [720, 576] \n\nHigh Definition (HD): [1280, 720] \n\nFull HD (FHD): [1920, 1080]\n\n4K Ultra High Definition (UHD): [3840, 2160]",
			"params": [
				{
					"name": "videoResolution",
					"summary": "the resolution",
					"schema": {
						"$ref": "#/components/schemas/Device.Resolution"
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Device.videoResolution",
					"x-event": "Device.onVideoResolutionChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the video resolution",
					"params": [
						{
							"name": "Default Result",
							"value": [
								1920,
								1080
							]
						}
					]
				}
			]
		},
		{
			"name": "Device.networkChanged",
			"summary": "Get the current network status and type",
			"params": [
				{
					"name": "networkInfo",
					"summary": "the status and type",
					"schema": {
						"$ref": "#/components/schemas/Device.NetworkInfoResult"
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Device.network",
					"x-event": "Device.onNetworkChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:network:status"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the network info",
					"params": [
						{
							"name": "Default Result",
							"value": {
								"state": "connected",
								"type": "wifi"
							}
						}
					]
				}
			]
		},
		{
			"name": "Discovery.policyChanged",
			"summary": "get the discovery policy",
			"params": [
				{
					"name": "policy",
					"summary": "discovery policy opt-in/outs",
					"schema": {
						"$ref": "#/components/schemas/Discovery.DiscoveryPolicy"
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "Discovery.policy",
					"x-event": "Discovery.onPolicyChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:discovery:policy"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the discovery policy",
					"params": [
						{
							"name": "Default Result",
							"value": {
								"enableRecommendations": true,
								"shareWatchHistory": true,
								"rememberWatchedPrograms": true
							}
						}
					]
				}
			]
		},
		{
			"name": "SecondScreen.friendlyNameChanged",
			"summary": "Get the broadcasted friendly name for the device",
			"params": [
				{
					"name": "friendlyName",
					"summary": "the device friendly-name",
					"schema": {
						"type": "string"
					}
				}
			],
			"tags": [
				{
					"name": "notifier",
					"x-notifier-for": "SecondScreen.friendlyName",
					"x-event": "SecondScreen.onFriendlyNameChanged"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:protocol:dial"
					]
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "friendlyName",
							"value": "Living Room"
						}
					]
				}
			]
		},
		{
			"name": "Discovery.pullEntityInfo",
			"tags": [
				{
					"name": "polymorphic-pull-event"
				},
				{
					"name": "notifier",
					"x-event": "Discovery.onPullEntityInfo",
					"x-pulls-for": "Discovery.entityInfo"
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:discovery:entity-info"
				},
				{
					"name": "deprecated"
				}
			],
			"summary": "Provide information about a program entity and its available watchable assets, such as entitlement status and price, via either a push or pull call flow.",
			"description": "Provide information about a program entity and its available watchable assets, such as entitlement status and price, via either a push or pull call flow. Includes information about the program entity and its relevant associated entities, such as extras, previews, and, in the case of TV series, seasons and episodes.\n\nSee the `EntityInfo` and `WayToWatch` data structures below for more information.\n\nThe app only needs to implement Pull support for `entityInfo` at this time.",
			"params": [
				{
					"name": "request",
					"summary": "A Discovery.EntityInfoFederatedRequest object.",
					"schema": {
						"$ref": "#/components/schemas/Discovery.EntityInfoFederatedRequest"
					}
				}
			],
			"examples": [
				{
					"name": "Send entity info for a movie to the platform.",
					"params": [
						{
							"name": "request",
							"value": {
								"correlationId": "xyz",
								"parameters": {
									"entityId": "345"
								}
							}
						}
					]
				},
				{
					"name": "Send entity info for a movie with a trailer to the platform.",
					"params": [
						{
							"name": "request",
							"value": {
								"correlationId": "xyz",
								"parameters": {
									"entityId": "345"
								}
							}
						}
					]
				},
				{
					"name": "Send entity info for a TV Series with seasons and episodes to the platform.",
					"params": [
						{
							"name": "request",
							"value": {
								"correlationId": "xyz",
								"parameters": {
									"entityId": "345"
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "Discovery.pullPurchasedContent",
			"tags": [
				{
					"name": "polymorphic-pull-event"
				},
				{
					"name": "notifier",
					"x-event": "Discovery.onPullPurchasedContent",
					"x-pulls-for": "Discovery.purchasedContent"
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:discovery:purchased-content"
				},
				{
					"name": "deprecated"
				}
			],
			"summary": "Provide a list of purchased content for the authenticated account, such as rentals and electronic sell through purchases.",
			"params": [
				{
					"name": "request",
					"summary": "A Discovery.PurchasedContentFederatedRequest object.",
					"schema": {
						"$ref": "#/components/schemas/Discovery.PurchasedContentFederatedRequest"
					}
				}
			],
			"examples": [
				{
					"name": "Inform the platform of the user's purchased content",
					"params": [
						{
							"name": "request",
							"value": {
								"correlationId": "xyz",
								"parameters": {
									"limit": 100
								}
							}
						}
					]
				}
			],
			"description": "Return content purchased by the user, such as rentals and electronic sell through purchases.\n\nThe app should return the user's 100 most recent purchases in `entries`. The total count of purchases must be provided in `count`. If `count` is greater than the total number of `entries`, the UI may provide a link into the app to see the complete purchase list.\n\nThe `EntityInfo` object returned is not required to have `waysToWatch` populated, but it is recommended that it do so in case the UI wants to surface additional information on the purchases screen.\n\nThe app should implement both Push and Pull methods for `purchasedContent`.\n\nThe app should actively push `purchasedContent` when:\n\n*  The app becomes Active.\n*  When the state of the purchasedContent set has changed.\n*  The app goes into Inactive or Background state, if there is a chance a change event has been missed."
		}
	],
	"components": {
		"schemas": {
			"https://meta.rdkcentral.com/firebolt/schemas/types": {
				"title": "Types",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/types",
				"definitions": {
					"SemanticVersion": {
						"title": "SemanticVersion",
						"type": "object",
						"properties": {
							"major": {
								"type": "integer",
								"minimum": 0
							},
							"minor": {
								"type": "integer",
								"minimum": 0
							},
							"patch": {
								"type": "integer",
								"minimum": 0
							},
							"readable": {
								"type": "string"
							}
						},
						"required": [
							"major",
							"minor",
							"patch",
							"readable"
						],
						"additionalProperties": false
					},
					"AudioProfile": {
						"title": "AudioProfile",
						"type": "string",
						"enum": [
							"stereo",
							"dolbyDigital5.1",
							"dolbyDigital7.1",
							"dolbyDigital5.1+",
							"dolbyDigital7.1+",
							"dolbyAtmos"
						]
					},
					"BooleanMap": {
						"title": "BooleanMap",
						"type": "object",
						"additionalProperties": {
							"type": "boolean"
						}
					},
					"FlatMap": {
						"title": "FlatMap",
						"type": "object",
						"additionalProperties": {
							"oneOf": [
								{
									"type": "string"
								},
								{
									"type": "number"
								},
								{
									"type": "boolean"
								}
							]
						}
					},
					"LocalizedString": {
						"title": "LocalizedString",
						"description": "Localized string supports either a simple `string` or a Map<string, string> of language codes to strings. When using a simple `string`, the current preferred langauge from `Localization.langauge()` is assumed.",
						"oneOf": [
							{
								"type": "string"
							},
							{
								"type": "object",
								"additionalProperties": {
									"type": "string"
								}
							}
						],
						"examples": [
							"A simple string, with no language code",
							{
								"en": "This is english",
								"es": "esto es español"
							}
						]
					},
					"ListenResponse": {
						"title": "ListenResponse",
						"type": "object",
						"required": [
							"event",
							"listening"
						],
						"properties": {
							"event": {
								"type": "string",
								"pattern": "[a-zA-Z]+\\.on[A-Z][a-zA-Z]+"
							},
							"listening": {
								"type": "boolean"
							}
						},
						"additionalProperties": false
					},
					"ProviderRequest": {
						"title": "ProviderRequest",
						"type": "object",
						"required": [
							"correlationId"
						],
						"additionalProperties": false,
						"properties": {
							"correlationId": {
								"type": "string",
								"description": "The id that was passed in to the event that triggered a provider method to be called"
							},
							"parameters": {
								"description": "The result of the provider response.",
								"type": "object"
							}
						}
					},
					"ProviderResponse": {
						"title": "ProviderResponse",
						"type": "object",
						"required": [
							"correlationId"
						],
						"additionalProperties": false,
						"properties": {
							"correlationId": {
								"type": "string",
								"description": "The id that was passed in to the event that triggered a provider method to be called"
							},
							"result": {
								"description": "The result of the provider response."
							}
						}
					},
					"Timeout": {
						"title": "Timeout",
						"description": "Defines the timeout in seconds. If the threshold for timeout is passed for any operation without a result it will throw an error.",
						"type": "integer",
						"default": 0,
						"minimum": 0,
						"maximum": 9999
					},
					"Dimensions": {
						"type": "object",
						"properties": {
							"width": {
								"type": "integer",
								"minimum": 1
							},
							"height": {
								"type": "integer",
								"minimum": 1
							}
						},
						"required": [
							"width",
							"height"
						]
					},
					"Image": {
						"type": "object",
						"properties": {
							"uri": {
								"description": "URI for the image. May be a relative path (e.g. ./foo/image.png) or absolute (e.g. https://foo.com/bar.png) depending on usage.",
								"type": "string"
							},
							"aspectRatio": {
								"description": "The aspect ratio of the image",
								"type": "string",
								"pattern": "^\\d+x\\d+"
							},
							"description": {
								"description": "Description of the image.",
								"type": "string"
							},
							"type": {
								"description": "The type of the image.",
								"type": "string",
								"enum": [
									"icon",
									"poster",
									"banner",
									"splash",
									"hero"
								]
							}
						},
						"required": [
							"uri",
							"aspectRatio",
							"type"
						]
					}
				}
			},
			"Accessibility.AudioDescriptionSettings": {
				"title": "AudioDescriptionSettings",
				"type": "object",
				"required": [
					"enabled"
				],
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "Whether or not audio descriptions should be enabled by default"
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/accessibility": {
				"title": "Accessibility",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/accessibility",
				"anyOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/ClosedCaptionsStyles"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/ClosedCaptionsSettings"
					}
				],
				"definitions": {
					"FontFamily": {
						"type": [
							"string",
							"null"
						],
						"enum": [
							"monospaced_serif",
							"proportional_serif",
							"monospaced_sanserif",
							"proportional_sanserif",
							"smallcaps",
							"cursive",
							"casual",
							null
						]
					},
					"FontSize": {
						"type": [
							"number",
							"null"
						],
						"minimum": 0
					},
					"FontEdge": {
						"type": [
							"string",
							"null"
						],
						"enum": [
							"none",
							"raised",
							"depressed",
							"uniform",
							"drop_shadow_left",
							"drop_shadow_right",
							null
						]
					},
					"Color": {
						"type": [
							"string",
							"null"
						]
					},
					"Opacity": {
						"type": [
							"number",
							"null"
						],
						"minimum": 0,
						"maximum": 100
					},
					"HorizontalAlignment": {
						"type": [
							"string",
							"null"
						]
					},
					"VerticalAlignment": {
						"type": [
							"string",
							"null"
						]
					},
					"ClosedCaptionsStyles": {
						"title": "ClosedCaptionsStyles",
						"type": "object",
						"description": "The default styles to use when displaying closed-captions",
						"properties": {
							"fontFamily": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/FontFamily"
							},
							"fontSize": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/FontSize"
							},
							"fontColor": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Color"
							},
							"fontEdge": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/FontEdge"
							},
							"fontEdgeColor": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Color"
							},
							"fontOpacity": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Opacity"
							},
							"backgroundColor": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Color"
							},
							"backgroundOpacity": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Opacity"
							},
							"textAlign": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/HorizontalAlignment"
							},
							"textAlignVertical": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/VerticalAlignment"
							},
							"windowColor": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Color"
							},
							"windowOpacity": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Opacity"
							}
						}
					},
					"ClosedCaptionsSettings": {
						"title": "ClosedCaptionsSettings",
						"type": "object",
						"required": [
							"enabled"
						],
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Whether or not closed-captions should be enabled by default"
							},
							"styles": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/ClosedCaptionsStyles"
							},
							"preferredLanguages": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/ISO639_2Language"
								}
							}
						},
						"examples": [
							{
								"enabled": true,
								"styles": {
									"fontFamily": "monospaced_serif",
									"fontSize": 1,
									"fontColor": "#ffffff",
									"fontEdge": "none",
									"fontEdgeColor": "#7F7F7F",
									"fontOpacity": 100,
									"backgroundColor": "#000000",
									"backgroundOpacity": 100,
									"textAlign": "center",
									"textAlignVertical": "middle",
									"windowColor": "white",
									"windowOpacity": 50
								},
								"preferredLanguages": [
									"eng",
									"spa"
								]
							}
						]
					},
					"VoiceSpeed": {
						"title": "VoiceSpeed",
						"type": "number",
						"minimum": 0.5,
						"maximum": 2
					},
					"VoiceGuidanceSettings": {
						"title": "VoiceGuidanceSettings",
						"type": "object",
						"required": [
							"enabled",
							"speed"
						],
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Whether or not voice guidance should be enabled by default"
							},
							"speed": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/VoiceSpeed",
								"description": "The speed at which voice guidance speech will be read back to the user"
							}
						},
						"examples": [
							{
								"enabled": true,
								"speed": 2
							}
						]
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/localization": {
				"title": "Localization",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/localization",
				"oneOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/Locality"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/CountryCode"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/Language"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/Locale"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/TimeZone"
					}
				],
				"definitions": {
					"CountryCode": {
						"type": "string",
						"pattern": "^[A-Z]{2}$"
					},
					"Language": {
						"type": "string",
						"pattern": "^[A-Za-z]{2}$"
					},
					"ISO639_2Language": {
						"type": "string",
						"pattern": "^[a-z]{3}$"
					},
					"Locality": {
						"type": "string"
					},
					"Locale": {
						"type": "string",
						"pattern": "^[a-zA-Z]+([a-zA-Z0-9\\-]*)$"
					},
					"TimeZone": {
						"type": "string",
						"pattern": "^[-+_/ A-Za-z 0-9]*$"
					}
				}
			},
			"Account.Token": {
				"type": "string",
				"description": "Encoded token provided by the Distributor for Device Authentication."
			},
			"Account.Expiry": {
				"type": "integer",
				"description": "Number of secs before the token expires",
				"minimum": 1
			},
			"AcknowledgeChallenge.ChallengeRequestor": {
				"title": "ChallengeRequestor",
				"type": "object",
				"required": [
					"id",
					"name"
				],
				"properties": {
					"id": {
						"type": "string",
						"description": "The id of the app that requested the challenge"
					},
					"name": {
						"type": "string",
						"description": "The name of the app that requested the challenge"
					}
				}
			},
			"AcknowledgeChallenge.Challenge": {
				"title": "Challenge",
				"type": "object",
				"required": [
					"capability",
					"requestor"
				],
				"properties": {}
			},
			"AcknowledgeChallenge.ChallengeProviderRequest": {
				"title": "ChallengeProviderRequest",
				"allOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/ProviderRequest"
					},
					{
						"type": "object",
						"required": [
							"parameters"
						],
						"properties": {
							"parameters": {
								"description": "The request to challenge the user",
								"$ref": "#/components/schemas/AcknowledgeChallenge.Challenge"
							}
						}
					}
				]
			},
			"AcknowledgeChallenge.GrantResult": {
				"title": "GrantResult",
				"type": "object",
				"required": [
					"granted"
				],
				"properties": {
					"granted": {
						"oneOf": [
							{
								"type": "boolean",
								"description": "Whether the user approved or denied the challenge"
							},
							{
								"const": null
							}
						]
					}
				},
				"examples": [
					{
						"granted": true
					},
					{
						"granted": false
					},
					{
						"granted": null
					}
				]
			},
			"Advertising.AdPolicy": {
				"title": "AdPolicy",
				"description": "Describes various ad playback enforcement rules that the app should follow.",
				"type": "object",
				"properties": {
					"skipRestriction": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/advertising#/definitions/SkipRestriction"
					},
					"limitAdTracking": {
						"type": "boolean"
					}
				}
			},
			"Advertising.AdConfigurationOptions": {
				"title": "AdConfigurationOptions",
				"type": "object",
				"properties": {
					"coppa": {
						"type": "boolean",
						"description": "Whether or not the app requires US COPPA compliance."
					},
					"environment": {
						"type": "string",
						"enum": [
							"prod",
							"test"
						],
						"default": "prod",
						"description": "Whether the app is running in a production or test mode."
					},
					"authenticationEntity": {
						"type": "string",
						"description": "The authentication provider, when it is separate entity than the app provider, e.g. an MVPD."
					}
				}
			},
			"Advertising.AdvertisingIdOptions": {
				"title": "AdvertisingIdOptions",
				"type": "object",
				"properties": {
					"scope": {
						"type": "object",
						"description": "Provides the options to send scope type and id to select desired advertising id",
						"required": [
							"type",
							"id"
						],
						"properties": {
							"type": {
								"type": "string",
								"enum": [
									"browse",
									"content"
								],
								"default": "browse",
								"description": "The scope type, which will determine where to show advertisement"
							},
							"id": {
								"type": "string",
								"description": "A value that identifies a specific scope within the scope type"
							}
						}
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/advertising": {
				"title": "Advertising",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/advertising",
				"oneOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/advertising#/definitions/SkipRestriction"
					}
				],
				"definitions": {
					"SkipRestriction": {
						"title": "SkipRestriction",
						"$comment": "xrn:advertising:policy:skipRestriction:",
						"type": "string",
						"enum": [
							"none",
							"adsUnwatched",
							"adsAll",
							"all"
						],
						"description": "The advertisement skip restriction.\n\nApplies to fast-forward/rewind (e.g. trick mode), seeking over an entire opportunity (e.g. jump), seeking out of what's currently playing, and \"Skip this ad...\" features. Seeking over multiple ad opportunities only requires playback of the _last_ opportunity, not all opportunities, preceding the seek destination.\n\n| Value        | Description                                                                    |\n|--------------|--------------------------------------------------------------------------------|\n| none         |No fast-forward, jump, or skip restrictions                                    |\n| adsUnwatched | Restrict fast-forward, jump, and skip for unwatched ad opportunities only.     |\n| adsAll       | Restrict fast-forward, jump, and skip for all ad opportunities                 |\n| all          | Restrict fast-forward, jump, and skip for all ad opportunities and all content |\n\nNamespace: `xrn:advertising:policy:skipRestriction:`\n\n"
					}
				}
			},
			"Authentication.TokenType": {
				"title": "TokenType",
				"type": "string",
				"enum": [
					"platform",
					"device",
					"distributor"
				]
			},
			"Capabilities.CapabilityOption": {
				"title": "CapabilityOption",
				"type": "object",
				"properties": {
					"role": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Role",
						"description": "Which role of the capability to check the state of, default will be 'use'",
						"default": "use"
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/capabilities": {
				"title": "Capabilities",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/capabilities",
				"oneOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Role"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/DenyReason"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/CapabilityInfo"
					}
				],
				"definitions": {
					"GrantPolicy": {
						"type": "object",
						"required": [
							"options",
							"scope",
							"lifespan",
							"overridable"
						],
						"if": {
							"properties": {
								"lifespan": {
									"const": "seconds"
								}
							}
						},
						"then": {
							"required": [
								"lifespanTtl"
							]
						},
						"properties": {
							"options": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/GrantRequirements"
								}
							},
							"scope": {
								"type": "string",
								"enum": [
									"app",
									"device"
								]
							},
							"lifespan": {
								"type": "string",
								"enum": [
									"once",
									"forever",
									"appActive",
									"powerActive",
									"seconds"
								]
							},
							"lifespanTtl": {
								"type": "integer",
								"minimum": 0
							},
							"privacySetting": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/PrivacySetting"
							},
							"overridable": {
								"type": "boolean"
							},
							"evaluateAt": {
								"type": "array",
								"minItems": 1,
								"items": {
									"type": "string",
									"enum": [
										"invocation",
										"activeSession"
									],
									"description": "Describes when this grant policy should be evaluated. 'invocation' causes this policy to be evaluated when a firebolt method is invoked and that method requires the capability this policy is for. 'activeSession' is when an application's firebolt state transitions to an active state (foreground/background) from an inactive state and this application is permitted to this capability. This field on the policy is an array, which means this policy could be evaluated at multiple places. For instance the policy could be evaluated at both invocation time and activeSession time. The default value for this field is ['invocation'], meaning the policy is only evaluated when a method is invoked."
								}
							},
							"persistence": {
								"type": "string",
								"enum": [
									"account",
									"device"
								],
								"description": "Tells Firebolt how to persist the grant state for this policy. If this is set to account, then any device that shares the same account id will have their user grant synced. If a user makes a grant decision on one device, that grant decision will be used by another device on the same account. The time of expiration for the grant is shared across devices as well. Only lifespan of 'forever' and 'seconds' are supported for account persistence. The means of syncing the user grants across devices is left up to the Firebolt implementation. The default value for persistence is 'device', this just means the grants are stored locally on the current device and are not shared to any other devices."
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"options": [
									{
										"steps": [
											{
												"capability": "xrn:firebolt:capability:usergrant:acknowledge"
											}
										]
									}
								],
								"scope": "app",
								"lifespan": "seconds",
								"lifespanTtl": 86400,
								"overridable": true
							},
							{
								"options": [],
								"scope": "device",
								"lifespan": "once",
								"overridable": true,
								"privacySetting": {
									"property": "Privacy.allowACR",
									"autoApplyPolicy": "always"
								}
							},
							{
								"options": [
									{
										"steps": [
											{
												"capability": "xrn:firebolt:capability:usergrant:acknowledge"
											}
										]
									}
								],
								"scope": "app",
								"lifespan": "seconds",
								"lifespanTtl": 86400,
								"overridable": true,
								"evaluateAt": [
									"invocation",
									"activeSession"
								],
								"persistence": "account"
							}
						]
					},
					"PrivacySetting": {
						"type": "object",
						"required": [
							"property",
							"autoApplyPolicy"
						],
						"properties": {
							"property": {
								"type": "string",
								"description": "The Firebolt <Module>.<getter> RPC method name for a property",
								"pattern": "^[a-zA-Z]+\\.[a-zA-Z]+$"
							},
							"autoApplyPolicy": {
								"type": "string",
								"enum": [
									"always",
									"allowed",
									"disallowed",
									"never"
								],
								"description": "Policy which describes how to to silently apply the grant. 'always' - Silently grant if value matches allow-value and silently deny if value does not match allow value. 'allowed' - Silently grant if value matches allow-value. 'disallowed' - Silently deny if value does not match allow-value. 'never' - Do not silently grant for any case"
							},
							"updateProperty": {
								"type": "boolean",
								"description": "Whether to update the property value to match the grant."
							}
						},
						"additionalProperties": false
					},
					"GrantRequirements": {
						"type": "object",
						"required": [
							"steps"
						],
						"properties": {
							"steps": {
								"type": "array",
								"minItems": 1,
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/GrantStep"
								}
							}
						},
						"additionalProperties": false
					},
					"GrantStep": {
						"type": "object",
						"required": [
							"capability"
						],
						"additionalProperties": false,
						"properties": {
							"capability": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/GrantKey"
							},
							"configuration": {
								"type": "object",
								"additionalProperties": true
							}
						}
					},
					"GrantKey": {
						"title": "GrantKey",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
							},
							{
								"type": "string",
								"pattern": ":usergrant:[a-z0-9]+?$"
							}
						]
					},
					"Capability": {
						"title": "Capability",
						"type": "string",
						"description": "A Capability is a discrete unit of functionality that a Firebolt device might be able to perform.",
						"pattern": "^xrn:firebolt:capability:([a-z0-9\\-]+)((:[a-z0-9\\-]+)?)$"
					},
					"Role": {
						"title": "Role",
						"description": "Role provides access level for the app for a given capability.",
						"type": "string",
						"enum": [
							"use",
							"manage",
							"provide"
						]
					},
					"Permission": {
						"title": "Permission",
						"description": "A capability combined with a Role, which an app may be permitted (by a distributor) or granted (by an end user).",
						"type": "object",
						"required": [
							"capability"
						],
						"properties": {
							"role": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Role"
							},
							"capability": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
							}
						},
						"additionalProperties": false
					},
					"DenyReason": {
						"title": "DenyReason",
						"description": "Reasons why a Capability might not be invokable",
						"type": "string",
						"enum": [
							"unpermitted",
							"unsupported",
							"disabled",
							"unavailable",
							"grantDenied",
							"ungranted"
						]
					},
					"CapPermissionStatus": {
						"type": "object",
						"properties": {
							"permitted": {
								"type": "boolean",
								"description": "Provides info whether the capability is permitted"
							},
							"granted": {
								"oneOf": [
									{
										"type": "boolean",
										"description": "Provides info whether the capability is granted"
									},
									{
										"const": null
									}
								]
							}
						},
						"additionalProperties": false
					},
					"CapabilityInfo": {
						"title": "CapabilityInfo",
						"type": "object",
						"required": [
							"supported",
							"available",
							"use",
							"manage",
							"provide"
						],
						"properties": {
							"capability": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
							},
							"supported": {
								"type": "boolean",
								"description": "Provides info whether the capability is supported"
							},
							"available": {
								"type": "boolean",
								"description": "Provides info whether the capability is available"
							},
							"use": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/CapPermissionStatus"
							},
							"manage": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/CapPermissionStatus"
							},
							"provide": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/CapPermissionStatus"
							},
							"details": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/DenyReason"
								},
								"minItems": 1,
								"maxItems": 6
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"capability": "xrn:firebolt:capability:keyboard",
								"supported": true,
								"available": true,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								}
							}
						]
					}
				}
			},
			"ClosedCaptions.ClosedCaptionsSettingsProviderRequest": {
				"title": "ClosedCaptionsSettingsProviderRequest",
				"allOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/ProviderRequest"
					},
					{
						"type": "object",
						"properties": {
							"parameters": {
								"const": null
							}
						}
					}
				],
				"examples": [
					{
						"correlationId": "abc"
					}
				]
			},
			"Content.InterestResult": {
				"title": "InterestResult",
				"type": "object",
				"properties": {
					"appId": {
						"type": "string"
					},
					"entity": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/EntityDetails"
					}
				},
				"required": [
					"appId",
					"entity"
				]
			},
			"Content.InterestEvent": {
				"title": "InterestEvent",
				"type": "object",
				"properties": {
					"appId": {
						"type": "string"
					},
					"type": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/discovery#/definitions/InterestType"
					},
					"reason": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/discovery#/definitions/InterestReason"
					},
					"entity": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/EntityDetails"
					}
				},
				"required": [
					"appId",
					"entity",
					"type",
					"reason"
				]
			},
			"https://meta.rdkcentral.com/firebolt/schemas/discovery": {
				"title": "Discovery",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/discovery",
				"anyOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/discovery#/definitions/PurchasedContentResult"
					}
				],
				"definitions": {
					"PurchasedContentResult": {
						"title": "PurchasedContentResult",
						"type": "object",
						"properties": {
							"expires": {
								"type": "string",
								"format": "date-time"
							},
							"totalCount": {
								"type": "integer",
								"minimum": 0
							},
							"entries": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/EntityInfo"
								}
							}
						},
						"required": [
							"expires",
							"totalCount",
							"entries"
						],
						"additionalProperties": false
					},
					"EntityInfoResult": {
						"title": "EntityInfoResult",
						"description": "The result for an `entityInfo()` push or pull.",
						"type": "object",
						"properties": {
							"expires": {
								"type": "string",
								"format": "date-time"
							},
							"entity": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/EntityInfo"
							},
							"related": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/EntityInfo"
								}
							}
						},
						"required": [
							"expires",
							"entity"
						],
						"additionalProperties": false
					},
					"InterestType": {
						"title": "InterestType",
						"type": "string",
						"enum": [
							"interest",
							"disinterest"
						]
					},
					"InterestReason": {
						"title": "InterestReason",
						"type": "string",
						"enum": [
							"playlist",
							"reaction",
							"recording"
						]
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/entity": {
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/entity",
				"title": "Entity",
				"oneOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/Entity"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/PlayableEntity"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/EntityDetails"
					}
				],
				"definitions": {
					"Entity": {
						"oneOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/ProgramEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/MusicEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/ChannelEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/UntypedEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/PlaylistEntity"
							}
						]
					},
					"EntityDetails": {
						"title": "EntityDetails",
						"type": "object",
						"required": [
							"identifiers"
						],
						"properties": {
							"identifiers": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/Entity"
							},
							"info": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/Metadata"
							},
							"waysToWatch": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/WayToWatch"
								},
								"description": "An array of ways a user is might watch this entity, regardless of entitlements."
							}
						}
					},
					"ChannelEntity": {
						"title": "ChannelEntity",
						"type": "object",
						"properties": {
							"entityType": {
								"const": "channel"
							},
							"channelType": {
								"type": "string",
								"enum": [
									"streaming",
									"overTheAir"
								]
							},
							"entityId": {
								"type": "string",
								"description": "ID of the channel, in the target App's scope."
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"required": [
							"entityType",
							"channelType",
							"entityId"
						],
						"additionalProperties": false
					},
					"ProgramEntity": {
						"title": "ProgramEntity",
						"oneOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/MovieEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/TVEpisodeEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/TVSeasonEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/TVSeriesEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/AdditionalEntity"
							}
						]
					},
					"MusicEntity": {
						"title": "MusicEntity",
						"type": "object",
						"properties": {
							"entityType": {
								"const": "music"
							},
							"musicType": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/MusicType"
							},
							"entityId": {
								"type": "string"
							}
						},
						"required": [
							"entityType",
							"musicType",
							"entityId"
						]
					},
					"MovieEntity": {
						"title": "MovieEntity",
						"description": "A Firebolt compliant representation of a Movie entity.",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "movie"
							},
							"entityId": {
								"type": "string"
							},
							"assetId": {
								"type": "string"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"entityType": "program",
								"programType": "movie",
								"entityId": "el-camino"
							}
						]
					},
					"TVEpisodeEntity": {
						"title": "TVEpisodeEntity",
						"description": "A Firebolt compliant representation of a TV Episode entity.",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId",
							"seriesId",
							"seasonId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "episode"
							},
							"entityId": {
								"type": "string"
							},
							"seriesId": {
								"type": "string"
							},
							"seasonId": {
								"type": "string"
							},
							"assetId": {
								"type": "string"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"entityType": "program",
								"programType": "episode",
								"entityId": "breaking-bad-pilot",
								"seriesId": "breaking-bad",
								"seasonId": "breaking-bad-season-1"
							}
						]
					},
					"TVSeasonEntity": {
						"title": "TVSeasonEntity",
						"description": "A Firebolt compliant representation of a TV Season entity.",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId",
							"seriesId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "season"
							},
							"entityId": {
								"type": "string"
							},
							"seriesId": {
								"type": "string"
							},
							"assetId": {
								"type": "string"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"entityType": "program",
								"programType": "season",
								"entityId": "breaking-bad-season-1",
								"seriesId": "breaking-bad"
							}
						]
					},
					"TVSeriesEntity": {
						"title": "TVSeriesEntity",
						"description": "A Firebolt compliant representation of a TV Series entity.",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "series"
							},
							"entityId": {
								"type": "string"
							},
							"assetId": {
								"type": "string"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"entityType": "program",
								"programType": "series",
								"entityId": "breaking-bad"
							}
						]
					},
					"PlaylistEntity": {
						"title": "PlaylistEntity",
						"description": "A Firebolt compliant representation of a Playlist entity.",
						"type": "object",
						"required": [
							"entityType",
							"entityId"
						],
						"properties": {
							"entityType": {
								"const": "playlist"
							},
							"entityId": {
								"type": "string"
							},
							"assetId": {
								"type": "string"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"entityType": "playlist",
								"entityId": "playlist/xyz"
							}
						]
					},
					"PlayableEntity": {
						"title": "PlayableEntity",
						"anyOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/MovieEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/TVEpisodeEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/PlaylistEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/MusicEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/AdditionalEntity"
							}
						]
					},
					"AdditionalEntity": {
						"title": "AdditionalEntity",
						"description": "A Firebolt compliant representation of the remaining program entity types.",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"type": "string",
								"enum": [
									"concert",
									"sportingEvent",
									"preview",
									"other",
									"advertisement",
									"musicVideo",
									"minisode",
									"extra"
								]
							},
							"entityId": {
								"type": "string"
							},
							"assetId": {
								"type": "string"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"entityType": "program",
								"programType": "concert",
								"entityId": "live-aid"
							}
						]
					},
					"UntypedEntity": {
						"title": "UntypedEntity",
						"allOf": [
							{
								"description": "A Firebolt compliant representation of the remaining entity types.",
								"type": "object",
								"required": [
									"entityId"
								],
								"properties": {
									"entityId": {
										"type": "string"
									},
									"assetId": {
										"type": "string"
									},
									"appContentData": {
										"type": "string",
										"maxLength": 256
									}
								},
								"additionalProperties": false
							}
						],
						"examples": [
							{
								"entityId": "an-entity"
							}
						]
					},
					"Metadata": {
						"title": "Metadata",
						"type": "object",
						"properties": {
							"title": {
								"type": "string",
								"description": "Title of the entity."
							},
							"synopsis": {
								"type": "string",
								"description": "Short description of the entity."
							},
							"seasonNumber": {
								"type": "number",
								"description": "For TV seasons, the season number. For TV episodes, the season that the episode belongs to."
							},
							"seasonCount": {
								"type": "number",
								"description": "For TV series, seasons, and episodes, the total number of seasons."
							},
							"episodeNumber": {
								"type": "number",
								"description": "For TV episodes, the episode number."
							},
							"episodeCount": {
								"type": "number",
								"description": "For TV seasons and episodes, the total number of episodes in the current season."
							},
							"releaseDate": {
								"type": "string",
								"format": "date-time",
								"description": "The date that the program or entity was released or first aired."
							},
							"contentRatings": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ContentRating"
								},
								"description": "A list of ContentRating objects, describing the entity's ratings in various rating schemes."
							}
						}
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/entertainment": {
				"title": "Entertainment",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/entertainment",
				"anyOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ProgramType"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/Entitlement"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/EntityInfo"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/OfferingType"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/WayToWatch"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ContentRating"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ContentIdentifiers"
					}
				],
				"definitions": {
					"ProgramType": {
						"title": "ProgramType",
						"type": "string",
						"description": "In the case of a program `entityType`, specifies the program type.",
						"enum": [
							"movie",
							"episode",
							"season",
							"series",
							"other",
							"preview",
							"extra",
							"concert",
							"sportingEvent",
							"advertisement",
							"musicVideo",
							"minisode"
						]
					},
					"MusicType": {
						"title": "MusicType",
						"type": "string",
						"description": "In the case of a music `entityType`, specifies the type of music entity.",
						"enum": [
							"song",
							"album"
						]
					},
					"Entitlement": {
						"title": "Entitlement",
						"type": "object",
						"properties": {
							"entitlementId": {
								"type": "string"
							},
							"startTime": {
								"type": "string",
								"format": "date-time"
							},
							"endTime": {
								"type": "string",
								"format": "date-time"
							}
						},
						"required": [
							"entitlementId"
						]
					},
					"EntityInfo": {
						"title": "EntityInfo",
						"description": "An EntityInfo object represents an \"entity\" on the platform. Currently, only entities of type `program` are supported. `programType` must be supplied to identify the program type.\n\nAdditionally, EntityInfo objects must specify a properly formed\nContentIdentifiers object, `entityType`, and `title`.  The app should provide\nthe `synopsis` property for a good user experience if the content\nmetadata is not available another way.\n\nThe ContentIdentifiers must be sufficient for navigating the user to the\nappropriate entity or detail screen via a `detail` intent or deep link.\n\nEntityInfo objects must provide at least one WayToWatch object when returned as\npart of an `entityInfo` method and a streamable asset is available to the user.\nIt is optional for the `purchasedContent` method, but recommended because the UI\nmay use those data.",
						"type": "object",
						"required": [
							"identifiers",
							"entityType",
							"title"
						],
						"properties": {
							"identifiers": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ContentIdentifiers"
							},
							"title": {
								"type": "string",
								"description": "Title of the entity."
							},
							"entityType": {
								"type": "string",
								"enum": [
									"program",
									"music"
								],
								"description": "The type of the entity, e.g. `program` or `music`."
							},
							"programType": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ProgramType"
							},
							"musicType": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/MusicType"
							},
							"synopsis": {
								"type": "string",
								"description": "Short description of the entity."
							},
							"seasonNumber": {
								"type": "number",
								"description": "For TV seasons, the season number. For TV episodes, the season that the episode belongs to."
							},
							"seasonCount": {
								"type": "number",
								"description": "For TV series, seasons, and episodes, the total number of seasons."
							},
							"episodeNumber": {
								"type": "number",
								"description": "For TV episodes, the episode number."
							},
							"episodeCount": {
								"type": "number",
								"description": "For TV seasons and episodes, the total number of episodes in the current season."
							},
							"releaseDate": {
								"type": "string",
								"format": "date-time",
								"description": "The date that the program or entity was released or first aired."
							},
							"contentRatings": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ContentRating"
								},
								"description": "A list of ContentRating objects, describing the entity's ratings in various rating schemes."
							},
							"waysToWatch": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/WayToWatch"
								},
								"description": "An array of ways a user is might watch this entity, regardless of entitlements."
							}
						},
						"if": {
							"properties": {
								"entityType": {
									"const": "program"
								}
							}
						},
						"then": {
							"required": [
								"programType"
							],
							"not": {
								"required": [
									"musicType"
								]
							}
						},
						"else": {
							"required": [
								"musicType"
							],
							"not": {
								"required": [
									"programType"
								]
							}
						}
					},
					"OfferingType": {
						"title": "OfferingType",
						"type": "string",
						"enum": [
							"free",
							"subscribe",
							"buy",
							"rent"
						],
						"description": "The offering type of the WayToWatch."
					},
					"WayToWatch": {
						"title": "WayToWatch",
						"type": "object",
						"required": [
							"identifiers",
							"audioProfile"
						],
						"properties": {
							"identifiers": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ContentIdentifiers"
							},
							"expires": {
								"type": "string",
								"format": "date-time",
								"description": "Time when the WayToWatch is no longer available."
							},
							"entitled": {
								"type": "boolean",
								"description": "Specify if the user is entitled to watch the entity."
							},
							"entitledExpires": {
								"type": "string",
								"format": "date-time",
								"description": "Time when the entity is no longer entitled."
							},
							"offeringType": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/OfferingType"
							},
							"hasAds": {
								"type": "boolean",
								"description": "True if the streamable asset contains ads."
							},
							"price": {
								"type": "number",
								"description": "For \"buy\" and \"rent\" WayToWatch, the price to buy or rent in the user's preferred currency."
							},
							"videoQuality": {
								"type": "array",
								"items": {
									"type": "string",
									"enum": [
										"SD",
										"HD",
										"UHD"
									]
								},
								"description": "List of the video qualities available via the WayToWatch."
							},
							"audioProfile": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/AudioProfile"
								},
								"description": "List of the audio types available via the WayToWatch."
							},
							"audioLanguages": {
								"type": "array",
								"items": {
									"type": "string"
								},
								"description": "List of audio track languages available on the WayToWatch. The first is considered the primary language. Languages are expressed as ISO 639 1/2 codes."
							},
							"closedCaptions": {
								"type": "array",
								"items": {
									"type": "string"
								},
								"description": "List of languages for which closed captions are available on the WayToWatch. Languages are expressed as ISO 639 1/2 codes."
							},
							"subtitles": {
								"type": "array",
								"items": {
									"type": "string"
								},
								"description": "List of languages for which subtitles are available on the WayToWatch. Languages are expressed as ISO 639 1/2 codes."
							},
							"audioDescriptions": {
								"type": "array",
								"items": {
									"type": "string"
								},
								"description": "List of languages for which audio descriptions (DVD) as available on the WayToWatch. Languages are expressed as ISO 639 1/2 codes."
							}
						},
						"description": "A WayToWatch describes a way to watch a video program. It may describe a single\nstreamable asset or a set of streamable assets. For example, an app provider may\ndescribe HD, SD, and UHD assets as individual WayToWatch objects or rolled into\na single WayToWatch.\n\nIf the WayToWatch represents a single streamable asset, the provided\nContentIdentifiers must be sufficient to play back the specific asset when sent\nvia a playback intent or deep link. If the WayToWatch represents multiple\nstreamable assets, the provided ContentIdentifiers must be sufficient to\nplayback one of the assets represented with no user action. In this scenario,\nthe app SHOULD choose the best asset for the user based on their device and\nsettings. The ContentIdentifiers MUST also be sufficient for navigating the user\nto the appropriate entity or detail screen via an entity intent.\n\nThe app should set the `entitled` property to indicate if the user can watch, or\nnot watch, the asset without making a purchase. If the entitlement is known to\nexpire at a certain time (e.g., a rental), the app should also provide the\n`entitledExpires` property. If the entitlement is not expired, the UI will use\nthe `entitled` property to display watchable assets to the user, adjust how\nassets are presented to the user, and how intents into the app are generated.\nFor example, the the Aggregated Experience could render a \"Watch\" button for an\nentitled asset versus a \"Subscribe\" button for an non-entitled asset.\n\nThe app should set the `offeringType` to define how the content may be\nauthorized. The UI will use this to adjust how content is presented to the user.\n\nA single WayToWatch cannot represent streamable assets available via multiple\npurchase paths. If, for example, an asset has both Buy, Rent and Subscription\navailability, the three different entitlement paths MUST be represented as\nmultiple WayToWatch objects.\n\n`price` should be populated for WayToWatch objects with `buy` or `rent`\n`offeringType`. If the WayToWatch represents a set of assets with various price\npoints, the `price` provided must be the lowest available price."
					},
					"ContentRating": {
						"title": "ContentRating",
						"type": "object",
						"required": [
							"scheme",
							"rating"
						],
						"properties": {
							"scheme": {
								"type": "string",
								"enum": [
									"CA-Movie",
									"CA-TV",
									"CA-Movie-Fr",
									"CA-TV-Fr",
									"US-Movie",
									"US-TV"
								],
								"description": "The rating scheme."
							},
							"rating": {
								"type": "string",
								"description": "The content rating."
							},
							"advisories": {
								"type": "array",
								"items": {
									"type": "string"
								},
								"description": "Optional list of subratings or content advisories."
							}
						},
						"description": "A ContentRating represents an age or content based of an entity. Supported rating schemes and associated types are below.\n\n## United States\n\n`US-Movie` (MPAA):\n\nRatings: `NR`, `G`, `PG`, `PG13`, `R`, `NC17`\n\nAdvisories: `AT`, `BN`, `SL`, `SS`, `N`, `V`\n\n`US-TV` (Vchip):\n\nRatings: `TVY`, `TVY7`, `TVG`, `TVPG`, `TV14`, `TVMA`\n\nAdvisories: `FV`, `D`, `L`, `S`, `V`\n\n## Canada\n\n`CA-Movie` (OFRB):\n\nRatings: `G`, `PG`, `14A`, `18A`, `R`, `E`\n\n`CA-TV` (AGVOT)\n\nRatings: `E`, `C`, `C8`, `G`, `PG`, `14+`, `18+`\n\nAdvisories: `C`, `C8`, `G`, `PG`, `14+`, `18+`\n\n`CA-Movie-Fr` (Canadian French language movies):\n\nRatings: `G`, `8+`, `13+`, `16+`, `18+`\n\n`CA-TV-Fr` (Canadian French language TV):\n\nRatings: `G`, `8+`, `13+`, `16+`, `18+`\n"
					},
					"ContentIdentifiers": {
						"title": "ContentIdentifiers",
						"type": "object",
						"properties": {
							"assetId": {
								"type": "string",
								"description": "Identifies a particular playable asset. For example, the HD version of a particular movie separate from the UHD version."
							},
							"entityId": {
								"type": "string",
								"description": "Identifies an entity, such as a Movie, TV Series or TV Episode."
							},
							"seasonId": {
								"type": "string",
								"description": "The TV Season for a TV Episode."
							},
							"seriesId": {
								"type": "string",
								"description": "The TV Series for a TV Episode or TV Season."
							},
							"appContentData": {
								"type": "string",
								"description": "App-specific content identifiers.",
								"maxLength": 1024
							}
						},
						"description": "The ContentIdentifiers object is how the app identifies an entity or asset to\nthe Firebolt platform. These ids are used to look up metadata and deep link into\nthe app.\n\nApps do not need to provide all ids. They only need to provide the minimum\nrequired to target a playable stream or an entity detail screen via a deep link.\nIf an id isn't needed to get to those pages, it doesn't need to be included."
					}
				}
			},
			"Device.Resolution": {
				"type": "array",
				"items": [
					{
						"type": "integer"
					},
					{
						"type": "integer"
					}
				],
				"additionalItems": false,
				"minItems": 2,
				"maxItems": 2
			},
			"Device.NetworkType": {
				"title": "NetworkType",
				"type": "string",
				"enum": [
					"wifi",
					"ethernet",
					"hybrid"
				],
				"description": "The type of network that is currently active"
			},
			"Device.NetworkState": {
				"title": "NetworkState",
				"type": "string",
				"enum": [
					"connected",
					"disconnected"
				],
				"description": "The type of network that is currently active"
			},
			"Device.AudioProfiles": {
				"title": "AudioProfiles",
				"type": "object",
				"properties": {
					"stereo": {
						"type": "boolean"
					},
					"dolbyDigital5.1": {
						"type": "boolean"
					},
					"dolbyDigital5.1+": {
						"type": "boolean"
					},
					"dolbyAtmos": {
						"type": "boolean"
					}
				},
				"required": [
					"stereo",
					"dolbyDigital5.1",
					"dolbyDigital5.1+",
					"dolbyAtmos"
				]
			},
			"Device.HDRFormatMap": {
				"title": "HDRFormatMap",
				"type": "object",
				"properties": {
					"hdr10": {
						"type": "boolean"
					},
					"hdr10Plus": {
						"type": "boolean"
					},
					"dolbyVision": {
						"type": "boolean"
					},
					"hlg": {
						"type": "boolean"
					}
				},
				"required": [
					"hdr10",
					"hdr10Plus",
					"dolbyVision",
					"hlg"
				],
				"description": "The type of HDR format"
			},
			"Device.HDCPVersionMap": {
				"title": "HDCPVersionMap",
				"type": "object",
				"properties": {
					"hdcp1.4": {
						"type": "boolean"
					},
					"hdcp2.2": {
						"type": "boolean"
					}
				},
				"required": [
					"hdcp1.4",
					"hdcp2.2"
				],
				"description": "The type of HDCP versions"
			},
			"Device.DeviceVersion": {
				"title": "DeviceVersion",
				"type": "object",
				"properties": {
					"sdk": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/SemanticVersion",
						"description": "The Firebolt SDK version"
					},
					"api": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/SemanticVersion",
						"description": "The latest Firebolt API version supported by the current device."
					},
					"firmware": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/SemanticVersion",
						"description": "The firmware version as reported by the device"
					},
					"os": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/SemanticVersion",
						"description": "**Deprecated** Use `firmware`, instead."
					},
					"debug": {
						"type": "string",
						"description": "Detailed version as a string, for debugging purposes"
					}
				},
				"required": [
					"api",
					"firmware",
					"os"
				]
			},
			"Device.NetworkInfoResult": {
				"title": "NetworkInfoResult",
				"type": "object",
				"properties": {
					"state": {
						"$ref": "#/components/schemas/Device.NetworkState"
					},
					"type": {
						"$ref": "#/components/schemas/Device.NetworkType"
					}
				},
				"required": [
					"state",
					"type"
				]
			},
			"Discovery.DiscoveryPolicy": {
				"title": "DiscoveryPolicy",
				"type": "object",
				"required": [
					"enableRecommendations",
					"shareWatchHistory",
					"rememberWatchedPrograms"
				],
				"properties": {
					"enableRecommendations": {
						"type": "boolean",
						"description": "Whether or not to the user has enabled history-based recommendations"
					},
					"shareWatchHistory": {
						"type": "boolean",
						"description": "Whether or not the user has enabled app watch history data to be shared with the platform"
					},
					"rememberWatchedPrograms": {
						"type": "boolean",
						"description": "Whether or not the user has enabled watch history"
					}
				}
			},
			"Discovery.FederatedRequest": {
				"title": "FederatedRequest",
				"type": "object",
				"properties": {
					"correlationId": {
						"type": "string"
					}
				},
				"required": [
					"correlationId"
				],
				"propertyNames": {
					"enum": [
						"correlationId",
						"parameters"
					]
				},
				"examples": [
					{
						"correlationId": "xyz"
					}
				]
			},
			"Discovery.FederatedResponse": {
				"title": "FederatedResponse",
				"type": "object",
				"properties": {
					"correlationId": {
						"type": "string"
					}
				},
				"required": [
					"correlationId",
					"result"
				],
				"propertyNames": {
					"enum": [
						"correlationId",
						"result"
					]
				},
				"examples": [
					{
						"correlationId": "xyz"
					}
				]
			},
			"Discovery.EntityInfoFederatedRequest": {
				"title": "EntityInfoFederatedRequest",
				"allOf": [
					{
						"$ref": "#/components/schemas/Discovery.FederatedRequest"
					},
					{
						"type": "object",
						"properties": {
							"parameters": {
								"$ref": "#/components/schemas/Discovery.EntityInfoParameters"
							}
						},
						"required": [
							"correlationId",
							"parameters"
						]
					}
				],
				"examples": [
					{
						"correlationId": "xyz",
						"parameters": {
							"entityId": "345"
						}
					}
				]
			},
			"Discovery.EntityInfoParameters": {
				"title": "EntityInfoParameters",
				"type": "object",
				"properties": {
					"entityId": {
						"type": "string"
					},
					"assetId": {
						"type": "string"
					}
				},
				"required": [
					"entityId"
				],
				"additionalProperties": false,
				"examples": [
					{
						"entityId": "345"
					}
				]
			},
			"Discovery.EntityInfoFederatedResponse": {
				"title": "EntityInfoFederatedResponse",
				"allOf": [
					{
						"$ref": "#/components/schemas/Discovery.FederatedResponse"
					},
					{
						"type": "object",
						"properties": {
							"result": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/discovery#/definitions/EntityInfoResult"
							}
						}
					}
				]
			},
			"Discovery.EntityInfoResult": {
				"title": "EntityInfoResult",
				"description": "The result for an `entityInfo()` push or pull.",
				"type": "object",
				"properties": {
					"expires": {
						"type": "string",
						"format": "date-time"
					},
					"entity": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/EntityInfo"
					},
					"related": {
						"type": "array",
						"items": {
							"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/EntityInfo"
						}
					}
				},
				"required": [
					"expires",
					"entity"
				],
				"additionalProperties": false
			},
			"Discovery.PurchasedContentFederatedRequest": {
				"title": "PurchasedContentFederatedRequest",
				"allOf": [
					{
						"$ref": "#/components/schemas/Discovery.FederatedRequest"
					},
					{
						"type": "object",
						"properties": {
							"parameters": {
								"$ref": "#/components/schemas/Discovery.PurchasedContentParameters"
							}
						},
						"required": [
							"correlationId",
							"parameters"
						]
					}
				],
				"examples": [
					{
						"correlationId": "xyz",
						"parameters": {
							"limit": 100
						}
					}
				]
			},
			"Discovery.PurchasedContentParameters": {
				"title": "PurchasedContentParameters",
				"type": "object",
				"properties": {
					"limit": {
						"type": "integer",
						"minimum": -1
					},
					"offeringType": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/OfferingType"
					},
					"programType": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ProgramType"
					}
				},
				"required": [
					"limit"
				],
				"additionalProperties": false,
				"examples": [
					{
						"limit": 100
					}
				]
			},
			"Discovery.PurchasedContentFederatedResponse": {
				"title": "PurchasedContentFederatedResponse",
				"allOf": [
					{
						"$ref": "#/components/schemas/Discovery.FederatedResponse"
					},
					{
						"type": "object",
						"properties": {
							"result": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/discovery#/definitions/PurchasedContentResult"
							}
						}
					}
				]
			},
			"Discovery.PurchasedContentResult": {
				"title": "PurchasedContentResult",
				"type": "object",
				"properties": {
					"expires": {
						"type": "string",
						"format": "date-time"
					},
					"totalCount": {
						"type": "integer",
						"minimum": 0
					},
					"entries": {
						"type": "array",
						"items": {
							"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/EntityInfo"
						}
					}
				},
				"required": [
					"expires",
					"totalCount",
					"entries"
				],
				"additionalProperties": false
			},
			"Discovery.Availability": {
				"title": "Availability",
				"type": "object",
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"channel-lineup",
							"program-lineup"
						]
					},
					"id": {
						"type": "string"
					},
					"catalogId": {
						"type": "string"
					},
					"startTime": {
						"type": "string",
						"format": "date-time"
					},
					"endTime": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"type",
					"id"
				]
			},
			"Discovery.ContentAccessIdentifiers": {
				"title": "ContentAccessIdentifiers",
				"type": "object",
				"properties": {
					"availabilities": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Discovery.Availability"
						},
						"description": "A list of identifiers that represent what content is discoverable for the subscriber. Excluding availabilities will cause no change to the availabilities that are stored for this subscriber. Providing an empty array will clear the subscriber's availabilities"
					},
					"entitlements": {
						"type": "array",
						"items": {
							"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/Entitlement"
						},
						"description": "A list of identifiers that represent what content is consumable for the subscriber. Excluding entitlements will cause no change to the entitlements that are stored for this subscriber. Providing an empty array will clear the subscriber's entitlements"
					}
				},
				"required": []
			},
			"Discovery.TuneChannels": {
				"title": "TuneChannels",
				"description": "An enumeration of xrn values for the TuneIntent that have special meaning.",
				"type": "string",
				"enum": [
					"xrn:firebolt:channel:any"
				]
			},
			"Discovery.UserInterestProviderParameters": {
				"title": "UserInterestProviderParameters",
				"type": "object",
				"required": [
					"type",
					"reason"
				],
				"properties": {
					"type": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/discovery#/definitions/InterestType"
					},
					"reason": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/discovery#/definitions/InterestReason"
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/intents": {
				"title": "Intents",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/intents",
				"oneOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/AppIntentMessage"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/PlatformIntentMessage"
					}
				],
				"definitions": {
					"AppIntentMessage": {
						"title": "AppIntentMessage",
						"description": "A message sent to a Firebolt app.",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentMessage"
							},
							{
								"type": "object",
								"required": [
									"appId",
									"intent"
								],
								"properties": {
									"appId": {
										"type": "string"
									},
									"intent": {
										"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/NavigationIntent"
									},
									"metadata": {
										"type": "object"
									}
								},
								"propertyNames": {
									"enum": [
										"type",
										"appId",
										"intent",
										"metadata"
									]
								}
							}
						],
						"examples": [
							{
								"type": "xrn:firebolt:intent:app:launch",
								"appId": "Netflix",
								"intent": {
									"action": "launch",
									"context": {
										"source": "voice"
									}
								},
								"metadata": {
									"foo": "bar"
								}
							},
							{
								"type": "xrn:firebolt:intent:app:entity",
								"appId": "Netflix",
								"intent": {
									"action": "entity",
									"data": {
										"entityType": "program",
										"programType": "movie",
										"entityId": "jerry-mcguire"
									},
									"context": {
										"source": "voice"
									}
								},
								"metadata": {
									"foo": "bar"
								}
							}
						]
					},
					"PlatformIntentMessage": {
						"title": "PlatformIntentMessage",
						"description": "A message sent to the Firebolt platform.",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentMessage"
							},
							{
								"type": "object",
								"required": [
									"intent"
								],
								"properties": {
									"intent": {
										"anyOf": [
											{
												"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/DiscoveryIntent"
											},
											{
												"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/PlaybackControlIntent"
											},
											{
												"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/DeviceIntent"
											},
											{
												"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/DialogIntent"
											}
										]
									},
									"metadata": {
										"type": "object"
									}
								},
								"propertyNames": {
									"enum": [
										"type",
										"intent",
										"metadata"
									]
								}
							}
						],
						"examples": [
							{
								"type": "xrn:firebolt:intent:platform:power",
								"intent": {
									"action": "power",
									"data": {
										"toggle": true
									},
									"context": {
										"source": "voice"
									}
								},
								"metadata": {
									"foo": "bar"
								}
							},
							{
								"type": "xrn:firebolt:intent:platform:discovery",
								"intent": {
									"action": "discovery",
									"data": {
										"query": "christmas",
										"menus": [
											"christmas-menu"
										],
										"federation": [
											{
												"appId": "netflix",
												"exclude": true
											}
										]
									},
									"context": {
										"source": "voice"
									}
								}
							}
						]
					},
					"Intent": {
						"description": "A Firebolt compliant representation of a user intention.",
						"type": "object",
						"required": [
							"action",
							"context"
						],
						"properties": {
							"action": {
								"type": "string"
							},
							"context": {
								"type": "object",
								"required": [
									"source"
								],
								"properties": {
									"source": {
										"type": "string"
									}
								}
							}
						}
					},
					"IntentProperties": {
						"type": "object",
						"propertyNames": {
							"enum": [
								"action",
								"data",
								"context"
							]
						}
					},
					"NavigationIntent": {
						"title": "NavigationIntent",
						"description": "A Firebolt compliant representation of a user intention to navigate to a specific place in an app.",
						"anyOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/HomeIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/LaunchIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/EntityIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/PlaybackIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/SearchIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/SectionIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/TuneIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/PlayEntityIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/PlayQueryIntent"
							}
						]
					},
					"DiscoveryIntent": {
						"description": "A Firebolt compliant representation of a user intention to discover something at the aggregate experience level, e.g. content, apps, etc.",
						"anyOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/ContentDiscoveryIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/EntityAppSelectionIntent"
							}
						]
					},
					"DeviceIntent": {
						"description": "A Firebolt compliant representation of a user intention to control some aspect of their device.",
						"anyOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/ButtonIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/FocusIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/SelectIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/BackIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/ExitIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/ChannelIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/ScrollIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/PowerIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/VolumeIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/MuteIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/MicrophoneIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/InputIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/TuneIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/VoiceGuidanceIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/HighContrastIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/ScreenMagnificationIntent"
							}
						]
					},
					"PlaybackControlIntent": {
						"description": "A Firebolt compliant representation of a user intention to control some aspect of in-progress playback.",
						"anyOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/PlayIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/PauseIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/ReplayIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/StopIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/PlaybackSpeedIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/SeekIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/SkipIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/FastForwardIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/RewindIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/ClosedCaptionsIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/AudioDescriptionsIntent"
							}
						]
					},
					"DialogIntent": {
						"description": "A Firebolt compliant representation of a platform or user intention to converse in a dialog.",
						"anyOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/MessageIntent"
							}
						]
					},
					"LaunchIntent": {
						"description": "A Firebolt compliant representation of a user intention to launch an app.",
						"title": "LaunchIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "launch"
									}
								},
								"not": {
									"required": [
										"data"
									]
								}
							}
						],
						"examples": [
							{
								"action": "launch",
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"HomeIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate an app to it's home screen, and bring that app to the foreground if needed.",
						"title": "HomeIntent",
						"allOf": [
							{
								"title": "HomeIntent",
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"title": "HomeIntent",
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"title": "HomeIntent",
								"type": "object",
								"properties": {
									"action": {
										"const": "home"
									}
								},
								"not": {
									"required": [
										"data"
									]
								}
							}
						],
						"examples": [
							{
								"action": "home",
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"EntityIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate an app to a specific entity page, and bring that app to the foreground if needed.",
						"title": "EntityIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "entity"
									},
									"data": {
										"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/Entity"
									}
								}
							}
						],
						"examples": [
							{
								"action": "entity",
								"context": {
									"source": "voice"
								},
								"data": {
									"entityType": "program",
									"programType": "movie",
									"entityId": "el-camino"
								}
							}
						]
					},
					"ChannelIntent": {
						"description": "A Firebolt compliant representation of a user intent to 'surf' to the next or previous channel.",
						"title": "ChannelIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "channel"
									},
									"data": {
										"type": "string",
										"enum": [
											"next",
											"previous"
										]
									}
								}
							}
						]
					},
					"TuneIntent": {
						"description": "A Firebolt compliant representation of a user intention to 'tune' to a traditional over-the-air broadcast, or an OTT Stream from an OTT or vMVPD App.",
						"title": "TuneIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "tune"
									},
									"data": {
										"type": "object",
										"required": [
											"entity"
										],
										"additionalProperties": false,
										"properties": {
											"entity": {
												"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/ChannelEntity"
											},
											"options": {
												"description": "The options property of the data property MUST have only one of the following fields.",
												"type": "object",
												"required": [],
												"additionalProperties": false,
												"minProperties": 1,
												"maxProperties": 1,
												"properties": {
													"assetId": {
														"type": "string",
														"description": "The ID of a specific 'listing', as scoped by the target App's ID-space, which the App should begin playback from."
													},
													"restartCurrentProgram": {
														"type": "boolean",
														"description": "Denotes that the App should start playback at the most recent program boundary, rather than 'live.'"
													},
													"time": {
														"type": "string",
														"format": "date-time",
														"description": "ISO 8601 Date/Time where the App should begin playback from."
													}
												}
											}
										}
									}
								}
							}
						],
						"examples": [
							{
								"action": "tune",
								"data": {
									"entity": {
										"entityType": "channel",
										"channelType": "streaming",
										"entityId": "an-ott-channel"
									},
									"options": {
										"restartCurrentProgram": true
									}
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"PlaybackIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate an app to a the video player for a specific, playable entity, and bring that app to the foreground if needed.",
						"title": "PlaybackIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "playback"
									},
									"data": {
										"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/PlayableEntity"
									}
								}
							}
						],
						"examples": [
							{
								"action": "playback",
								"data": {
									"entityType": "program",
									"programType": "episode",
									"entityId": "breaking-bad-pilot",
									"seriesId": "breaking-bad",
									"seasonId": "breaking-bad-season-1"
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"SearchIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate an app to it's search UI with a search term populated, and bring that app to the foreground if needed.",
						"title": "SearchIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "search"
									},
									"data": {
										"type": "object",
										"required": [
											"query"
										],
										"properties": {
											"query": {
												"type": "string"
											}
										},
										"additionalProperties": false
									}
								}
							}
						],
						"examples": [
							{
								"action": "search",
								"data": {
									"query": "walter white"
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"SectionIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate an app to a section not covered by `home`, `entity`, `player`, or `search`, and bring that app to the foreground if needed.",
						"title": "SectionIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "section"
									},
									"data": {
										"type": "object",
										"required": [
											"sectionName"
										],
										"properties": {
											"sectionName": {
												"type": "string"
											}
										},
										"additionalProperties": false
									}
								},
								"required": [
									"data"
								]
							}
						],
						"examples": [
							{
								"action": "section",
								"data": {
									"sectionName": "settings"
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"PlayEntityIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate an app to a the video player for a specific, playable entity, and bring that app to the foreground if needed.",
						"title": "PlayEntityIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "play-entity"
									},
									"data": {
										"type": "object",
										"properties": {
											"entity": {
												"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/PlayableEntity"
											},
											"options": {
												"type": "object",
												"properties": {
													"playFirstId": {
														"type": "string"
													},
													"playFirstTrack": {
														"type": "integer",
														"minimum": 1
													}
												},
												"additionalProperties": false
											}
										},
										"required": [
											"entity"
										],
										"propertyNames": {
											"enum": [
												"entity",
												"options"
											]
										},
										"if": {
											"properties": {
												"entity": {
													"type": "object",
													"required": [
														"entityType"
													],
													"properties": {
														"entityType": {
															"const": "playlist"
														}
													}
												}
											}
										},
										"then": {
											"type": "object",
											"properties": {
												"options": {
													"type": "object",
													"maxProperties": 1
												}
											}
										},
										"else": {
											"type": "object",
											"properties": {
												"options": {
													"type": "object",
													"maxProperties": 0
												}
											}
										}
									}
								}
							}
						],
						"examples": [
							{
								"action": "play-entity",
								"data": {
									"entity": {
										"entityType": "playlist",
										"entityId": "playlist/xyz"
									},
									"options": {
										"playFirstId": "song/xyz"
									}
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "play-entity",
								"data": {
									"entity": {
										"entityType": "playlist",
										"entityId": "playlist/xyz"
									},
									"options": {
										"playFirstTrack": 3
									}
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"PlayQueryIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate an app to a the video player for an abstract query to be searched for and played by the app.",
						"title": "PlayQueryIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "play-query"
									},
									"data": {
										"type": "object",
										"properties": {
											"query": {
												"type": "string"
											},
											"options": {
												"type": "object",
												"properties": {
													"programTypes": {
														"type": "array",
														"items": {
															"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ProgramType"
														}
													},
													"musicTypes": {
														"type": "array",
														"items": {
															"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/MusicType"
														}
													}
												},
												"additionalProperties": false
											}
										},
										"required": [
											"query"
										],
										"propertyNames": {
											"enum": [
												"query",
												"options"
											]
										}
									}
								}
							}
						],
						"examples": [
							{
								"action": "play-query",
								"data": {
									"query": "Ed Sheeran"
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "play-query",
								"data": {
									"query": "Ed Sheeran",
									"options": {
										"programTypes": [
											"movie"
										]
									}
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "play-query",
								"data": {
									"query": "Ed Sheeran",
									"options": {
										"programTypes": [
											"movie"
										],
										"musicTypes": [
											"song"
										]
									}
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"ContentDiscoveryIntent": {
						"description": "A Firebolt compliant representation of a user intention to discover content with out a clear specific entity match.",
						"title": "ContentDiscoveryIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "discovery"
									},
									"data": {
										"type": "object",
										"required": [
											"query"
										],
										"properties": {
											"query": {
												"type": "string"
											},
											"filters": {
												"type": "array",
												"items": {
													"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Filter"
												},
												"minItems": 1,
												"maxItems": 100
											},
											"keywords": {
												"type": "array",
												"items": {
													"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Keyword"
												},
												"minItems": 1,
												"maxItems": 100
											},
											"menus": {
												"type": "array",
												"items": {
													"type": "string"
												},
												"minItems": 1,
												"maxItems": 100
											},
											"federation": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"appId": {
															"type": "string"
														},
														"exclude": {
															"type": "boolean"
														}
													}
												}
											}
										}
									}
								}
							}
						],
						"examples": [
							{
								"action": "discovery",
								"context": {
									"source": "voice"
								},
								"data": {
									"query": "Bill Murray Comedies in 4K",
									"filters": [
										{
											"key": "videoResolution",
											"value": "UHD"
										}
									],
									"keywords": [
										{
											"keyword": "Bill Murray",
											"type": "Person",
											"appId": "FooApp"
										},
										{
											"keyword": "Comedies",
											"type": "Genre",
											"appId": "FooApp"
										}
									],
									"menus": [
										"abcdef",
										"ghijkl"
									],
									"federation": [
										{
											"appId": "BarApp",
											"exclude": false
										}
									]
								}
							}
						]
					},
					"EntityAppSelectionIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate to a specific entity that could be served by more than one app.",
						"title": "EntityAppSelectionIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "entityAppSelection"
									},
									"data": {
										"type": "object",
										"required": [
											"query",
											"entity",
											"apps"
										],
										"properties": {
											"query": {
												"type": "string"
											},
											"entity": {
												"anyOf": [
													{
														"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/MovieEntity"
													},
													{
														"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/TVEpisodeEntity"
													},
													{
														"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/TVSeriesEntity"
													},
													{
														"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/TVSeasonEntity"
													},
													{
														"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/AdditionalEntity"
													}
												]
											},
											"apps": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"appId": {
															"type": "string"
														},
														"entity": {
															"anyOf": [
																{
																	"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/MovieEntity"
																},
																{
																	"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/TVEpisodeEntity"
																},
																{
																	"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/TVSeriesEntity"
																},
																{
																	"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/TVSeasonEntity"
																},
																{
																	"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/AdditionalEntity"
																}
															]
														}
													}
												},
												"minItems": 2
											},
											"menus": {
												"type": "array",
												"items": {
													"type": "string"
												},
												"minItems": 1,
												"maxItems": 100
											},
											"federation": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"appId": {
															"type": "string"
														},
														"exclude": {
															"type": "boolean"
														}
													}
												}
											}
										}
									}
								}
							}
						],
						"examples": [
							{
								"action": "entityAppSelection",
								"context": {
									"source": "voice"
								},
								"data": {
									"query": "the departed",
									"entity": {
										"entityType": "program",
										"programType": "movie",
										"entityId": "departed-merlin-id"
									},
									"apps": [
										{
											"appId": "hbo",
											"entity": {
												"entityType": "program",
												"programType": "movie",
												"entityId": "departed-hbo-id"
											}
										},
										{
											"appId": "netflix",
											"entity": {
												"entityType": "program",
												"programType": "movie",
												"entityId": "departed-netflix-id"
											}
										}
									],
									"federation": [
										{
											"appId": "netflix",
											"exclude": true
										}
									],
									"menusIds": [
										"123"
									]
								}
							}
						]
					},
					"FocusIntent": {
						"description": "A Firebolt compliant representation of a user intention to interact with their device in a way analogous to pressing remote directional pad buttons.",
						"title": "FocusIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "focus"
									},
									"data": {
										"type": "object",
										"required": [
											"direction"
										],
										"properties": {
											"direction": {
												"type": "string",
												"enum": [
													"up",
													"down",
													"left",
													"right"
												]
											}
										},
										"additionalProperties": false
									}
								}
							}
						],
						"examples": [
							{
								"action": "focus",
								"data": {
									"direction": "up"
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"SelectIntent": {
						"description": "A Firebolt compliant representation of a user intention to interact with their device in a way analogous to pressing the remote 'select' button.",
						"title": "SelectIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "select"
									}
								},
								"not": {
									"required": [
										"data"
									]
								}
							}
						],
						"examples": [
							{
								"action": "select",
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"BackIntent": {
						"description": "A Firebolt compliant representation of a user intention to interact with their device in a way analogous to pressing the remote 'back' button.",
						"title": "BackIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "back"
									}
								},
								"not": {
									"required": [
										"data"
									]
								}
							}
						],
						"examples": [
							{
								"action": "back",
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"ExitIntent": {
						"description": "A Firebolt compliant representation of a user intention to interact with their device in a way analogous to pressing the remote 'back' button.",
						"title": "ExitIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "exit"
									}
								},
								"not": {
									"required": [
										"data"
									]
								}
							}
						],
						"examples": [
							{
								"action": "exit",
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"ScrollIntent": {
						"description": "A Firebolt compliant representation of a user intention to interact with their device in a way analogous to pressing remote directional pad buttons.",
						"title": "ScrollIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "scroll"
									},
									"data": {
										"type": "object",
										"required": [
											"direction"
										],
										"properties": {
											"direction": {
												"type": "string",
												"enum": [
													"up",
													"down",
													"left",
													"right"
												]
											},
											"unit": {
												"type": "string",
												"enum": [
													"line",
													"page",
													"percent"
												]
											}
										},
										"additionalProperties": false
									}
								}
							}
						],
						"examples": [
							{
								"action": "scroll",
								"data": {
									"direction": "up"
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"ButtonIntent": {
						"description": "A Firebolt compliant representation of a user intention to interact with their device in a way analogous to pressing one of the remote buttons.",
						"title": "ButtonIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "button"
									},
									"data": {
										"type": "object",
										"required": [
											"operation"
										],
										"properties": {
											"operation": {
												"type": "string",
												"enum": [
													"down",
													"up",
													"prev",
													"next",
													"enter",
													"exit",
													"info",
													"menu",
													"back",
													"cancel",
													"record"
												]
											}
										},
										"additionalProperties": false
									}
								}
							}
						],
						"examples": [
							{
								"action": "button",
								"data": {
									"operation": "menu"
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"VolumeIntent": {
						"description": "A Firebolt compliant representation of a user intention to change the device volume.",
						"title": "VolumeIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "volume"
									},
									"data": {
										"type": "object",
										"properties": {
											"value": {
												"type": "number"
											},
											"relative": {
												"const": true
											}
										},
										"required": [
											"value"
										],
										"if": {
											"required": [
												"relative"
											]
										},
										"then": {
											"properties": {
												"value": {
													"type": "number",
													"minimum": -50,
													"maximum": 50
												}
											}
										},
										"else": {
											"properties": {
												"value": {
													"type": "number",
													"minimum": 0,
													"maximum": 100
												}
											}
										},
										"additionalProperties": false
									}
								}
							}
						],
						"examples": [
							{
								"action": "volume",
								"data": {
									"value": 70
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "volume",
								"data": {
									"value": 10,
									"relative": true
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"MuteIntent": {
						"description": "A Firebolt compliant representation of a user intention to mute or unmute the device.",
						"title": "MuteIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "mute"
									},
									"data": {
										"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/BooleanToggle"
									}
								}
							}
						],
						"examples": [
							{
								"action": "mute",
								"data": {
									"value": false
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "mute",
								"data": {
									"toggle": true
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"PowerIntent": {
						"description": "A Firebolt compliant representation of a user intention to turn their device on or off.",
						"title": "PowerIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "power"
									},
									"data": {
										"type": "object",
										"properties": {
											"value": {
												"type": "boolean"
											},
											"toggle": {
												"const": true
											},
											"delay": {
												"type": "integer",
												"minimum": 0
											}
										},
										"if": {
											"required": [
												"value"
											]
										},
										"then": {
											"not": {
												"required": [
													"toggle"
												]
											}
										},
										"else": {
											"required": [
												"toggle"
											]
										},
										"additionalProperties": false
									}
								}
							}
						],
						"examples": [
							{
								"action": "power",
								"data": {
									"value": false
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "power",
								"data": {
									"toggle": true
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "power",
								"data": {
									"value": false,
									"delay": 900
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"MicrophoneIntent": {
						"description": "A Firebolt compliant representation of a user intention to turn their microphone on or off.",
						"title": "MicrophoneIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "microphone"
									},
									"data": {
										"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/BooleanToggle"
									}
								}
							}
						],
						"examples": [
							{
								"action": "microphone",
								"data": {
									"value": false
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "microphone",
								"data": {
									"toggle": true
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"InputIntent": {
						"description": "A Firebolt compliant representation of a user intention to change which video input is active.",
						"title": "InputIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "input"
									},
									"data": {
										"type": "object",
										"required": [
											"interface"
										],
										"properties": {
											"interface": {
												"type": "string",
												"enum": [
													"hdmi"
												]
											},
											"number": {
												"type": "integer",
												"minimum": 1,
												"maximum": 100
											}
										},
										"additionalProperties": false
									}
								}
							}
						],
						"examples": [
							{
								"action": "input",
								"data": {
									"interface": "hdmi"
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "input",
								"data": {
									"interface": "hdmi",
									"number": 1
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"PauseIntent": {
						"description": "A Firebolt compliant representation of a user intention to pause in-progress playback.",
						"title": "PauseIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "pause"
									}
								}
							}
						],
						"examples": [
							{
								"action": "pause",
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"PlayIntent": {
						"description": "A Firebolt compliant representation of a user intention to play/resume content.",
						"title": "PlayIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "play"
									}
								}
							}
						],
						"examples": [
							{
								"action": "play",
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"ReplayIntent": {
						"description": "A Firebolt compliant representation of a user intention to replay content.",
						"title": "ReplayIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "replay"
									}
								}
							}
						],
						"examples": [
							{
								"action": "replay",
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"StopIntent": {
						"description": "A Firebolt compliant representation of a user intention to stop content.",
						"title": "StopIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "stop"
									}
								}
							}
						],
						"examples": [
							{
								"action": "stop",
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"PlaybackSpeedIntent": {
						"description": "A Firebolt compliant representation of a user intention to change the speed of in-progress playback.",
						"title": "PlaybackSpeedIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "speed"
									},
									"data": {
										"type": "object",
										"properties": {
											"value": {
												"type": "number",
												"exclusiveMinimum": 0,
												"maximum": 4
											},
											"toggle": {
												"type": "boolean"
											}
										},
										"minProperties": 1,
										"maxProperties": 1,
										"additionalProperties": false
									}
								}
							}
						],
						"examples": [
							{
								"action": "speed",
								"data": {
									"value": 2
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "speed",
								"data": {
									"toggle": true
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"FastForwardIntent": {
						"description": "A Firebolt compliant representation of a user intention to fast-forward in-progress playback.",
						"title": "FastForwardIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "fast-forward"
									},
									"data": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number",
												"exclusiveMinimum": 0,
												"maximum": 10
											}
										}
									}
								}
							}
						],
						"examples": [
							{
								"action": "fast-forward",
								"data": {
									"speed": 2
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "fast-forward",
								"data": {
									"speed": 0.5
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "fast-forward",
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"RewindIntent": {
						"description": "A Firebolt compliant representation of a user intention to rewind in-progress playback.",
						"title": "RewindIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "rewind"
									},
									"data": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number",
												"exclusiveMinimum": 0,
												"maximum": 10
											}
										}
									}
								}
							}
						],
						"examples": [
							{
								"action": "rewind",
								"data": {
									"speed": 2
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "rewind",
								"data": {
									"speed": 0.5
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "rewind",
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"SeekIntent": {
						"description": "A Firebolt compliant representation of a user intention to seek to a different time for in-progress playback.",
						"title": "SeekIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "seek"
									},
									"data": {
										"allOf": [
											{
												"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/DirectionalOperation"
											},
											{
												"type": "object",
												"properties": {
													"seconds": {
														"type": "number"
													},
													"relative": {
														"const": true
													}
												},
												"required": [
													"seconds"
												],
												"if": {
													"not": {
														"required": [
															"relative"
														]
													}
												},
												"then": {
													"properties": {
														"seconds": {
															"type": "number",
															"minimum": 0,
															"maximum": 86400
														}
													}
												},
												"else": {
													"properties": {
														"seconds": {
															"type": "number",
															"minimum": -43200,
															"maximum": 43200
														}
													}
												}
											}
										]
									}
								}
							}
						],
						"examples": [
							{
								"action": "seek",
								"data": {
									"seconds": 300
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "seek",
								"data": {
									"relative": true,
									"seconds": -30
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"SkipIntent": {
						"description": "A Firebolt compliant representation of a user intention to skip a scene/chapter/ad during in-progress playback.",
						"title": "SkipIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "skip"
									},
									"data": {
										"allOf": [
											{
												"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/DirectionalOperation"
											},
											{
												"type": "object",
												"properties": {
													"count": {
														"type": "number",
														"exclusiveMinimum": 0,
														"maximum": 100
													}
												},
												"propertyNames": {
													"enum": [
														"direction",
														"count"
													]
												}
											}
										]
									}
								}
							}
						],
						"examples": [
							{
								"action": "skip",
								"data": {
									"direction": "forward",
									"count": 1
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "skip",
								"data": {
									"direction": "backward",
									"count": 1
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"ClosedCaptionsIntent": {
						"description": "A Firebolt compliant representation of a user intention to enable/disable closed captions.",
						"title": "ClosedCaptionsIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "closed-captions"
									},
									"data": {
										"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/BooleanToggle"
									}
								}
							}
						],
						"examples": [
							{
								"action": "closed-captions",
								"data": {
									"value": false
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "closed-captions",
								"data": {
									"toggle": true
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"VoiceGuidanceIntent": {
						"description": "A Firebolt compliant representation of a user intention to enable/disable voice guidance.",
						"title": "VoiceGuidanceIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "voice-guidance"
									},
									"data": {
										"type": "object",
										"properties": {
											"value": {
												"type": "boolean"
											},
											"toggle": {
												"const": true
											},
											"speed": {
												"type": "integer"
											},
											"relative": {
												"const": true
											},
											"verbosity": {
												"type": "string",
												"enum": [
													"low",
													"hight"
												]
											}
										},
										"if": {
											"required": [
												"value"
											]
										},
										"then": {
											"not": {
												"required": [
													"toggle"
												]
											},
											"if": {
												"required": [
													"relative"
												]
											},
											"then": {
												"properties": {
													"speed": {
														"type": "integer",
														"minimum": -10,
														"maximum": 10
													}
												}
											},
											"else": {
												"properties": {
													"speed": {
														"type": "integer",
														"exclusiveMinimum": 0,
														"maximum": 10
													}
												}
											}
										},
										"else": {
											"if": {
												"required": [
													"toggle"
												]
											},
											"then": {
												"not": {
													"required": [
														"value"
													]
												}
											}
										},
										"additionalProperties": false
									}
								}
							}
						],
						"examples": [
							{
								"action": "voice-guidance",
								"data": {
									"value": true,
									"verbosity": "low"
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "voice-guidance",
								"data": {
									"speed": -1,
									"relative": true
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "voice-guidance",
								"data": {
									"toggle": true
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"AudioDescriptionsIntent": {
						"description": "A Firebolt compliant representation of a user intention to enable/disable audio descriptions.",
						"title": "AudioDescriptionsIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "audio-descriptions"
									},
									"data": {
										"type": "object",
										"properties": {
											"value": {
												"type": "boolean"
											},
											"toggle": {
												"const": true
											},
											"language": {
												"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/ISO639_2Language"
											}
										},
										"if": {
											"required": [
												"value"
											]
										},
										"then": {
											"not": {
												"required": [
													"toggle"
												]
											}
										},
										"else": {
											"required": [
												"toggle"
											]
										},
										"additionalProperties": false
									}
								}
							}
						],
						"examples": [
							{
								"action": "audio-descriptions",
								"data": {
									"value": false
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "audio-descriptions",
								"data": {
									"toggle": true
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "audio-descriptions",
								"data": {
									"value": true,
									"language": "eng"
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"HighContrastIntent": {
						"description": "A Firebolt compliant representation of a user intention to enable or disable high contrast mode.",
						"title": "HighContrastIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "high-contrast"
									},
									"data": {
										"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/BooleanToggle"
									}
								}
							}
						],
						"examples": [
							{
								"action": "high-contrast",
								"data": {
									"value": false
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "high-contrast",
								"data": {
									"toggle": true
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"ScreenMagnificationIntent": {
						"description": "A Firebolt compliant representation of a user intention to turn screen magnification on or off.",
						"title": "ScreenMagnificationIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "screen-magnification"
									},
									"data": {
										"type": "object",
										"properties": {
											"value": {
												"type": "boolean"
											},
											"toggle": {
												"const": true
											},
											"scale": {
												"type": "number",
												"minimum": 1,
												"maximum": 10
											}
										},
										"if": {
											"required": [
												"toggle"
											]
										},
										"then": {
											"type": "object",
											"maxProperties": 1
										},
										"additionalProperties": false
									}
								}
							}
						],
						"examples": [
							{
								"action": "screen-magnification",
								"data": {
									"value": false
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "screen-magnification",
								"data": {
									"value": true,
									"scale": 2.5
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "screen-magnification",
								"data": {
									"toggle": true
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "screen-magnification",
								"data": {
									"value": false
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"MessageIntent": {
						"description": "A Firebolt compliant representation of a platform intention to display a message on the device.",
						"title": "MessageIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "message"
									},
									"data": {
										"type": "object",
										"properties": {
											"value": {
												"type": "string"
											}
										}
									}
								}
							}
						],
						"examples": [
							{
								"action": "message",
								"data": {
									"value": "Here's a message"
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"Identifier": {
						"type": "string"
					},
					"Filter": {
						"type": "object",
						"properties": {
							"key": {
								"type": "string"
							},
							"value": {
								"type": "string"
							}
						}
					},
					"Keyword": {
						"type": "object",
						"properties": {
							"keyword": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"appId": {
								"type": "string"
							}
						}
					},
					"DirectionalOperation": {
						"type": "object",
						"properties": {
							"direction": {
								"type": "string",
								"enum": [
									"forward",
									"backward"
								]
							}
						}
					},
					"BooleanToggle": {
						"type": "object",
						"properties": {
							"value": {
								"type": "boolean"
							},
							"toggle": {
								"const": true
							}
						},
						"minProperties": 1,
						"maxProperties": 1,
						"additionalProperties": false
					},
					"IntentMessage": {
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"pattern": "^xrn:firebolt:intent:(app|platform):[a-zA-Z]+$"
							}
						},
						"required": [
							"type"
						]
					}
				}
			},
			"HDMIInput.HDMIPortId": {
				"type": "string",
				"pattern": "^HDMI[0-9]+$"
			},
			"HDMIInput.EDIDVersion": {
				"title": "EDIDVersion",
				"type": "string",
				"enum": [
					"1.4",
					"2.0",
					"unknown"
				]
			},
			"HDMIInput.HDMIInputPort": {
				"title": "HDMIInputPort",
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"port": {
						"$ref": "#/components/schemas/HDMIInput.HDMIPortId"
					},
					"connected": {
						"type": "boolean"
					},
					"signal": {
						"$ref": "#/components/schemas/HDMIInput.HDMISignalStatus"
					},
					"arcCapable": {
						"type": "boolean"
					},
					"arcConnected": {
						"type": "boolean"
					},
					"edidVersion": {
						"$ref": "#/components/schemas/HDMIInput.EDIDVersion"
					},
					"autoLowLatencyModeCapable": {
						"type": "boolean"
					},
					"autoLowLatencyModeSignalled": {
						"type": "boolean"
					}
				},
				"if": {
					"properties": {
						"edidVersion": {
							"type": "string",
							"enum": [
								"1.4",
								"unknown"
							]
						}
					}
				},
				"then": {
					"properties": {
						"autoLowLatencyModeCapable": {
							"const": false
						},
						"autoLowLatencyModeSignalled": {
							"const": false
						}
					}
				},
				"required": [
					"port",
					"connected",
					"signal",
					"arcCapable",
					"arcConnected",
					"edidVersion",
					"autoLowLatencyModeCapable",
					"autoLowLatencyModeSignalled"
				]
			},
			"HDMIInput.HDMISignalStatus": {
				"type": "string",
				"enum": [
					"none",
					"stable",
					"unstable",
					"unsupported",
					"unknown"
				]
			},
			"HDMIInput.SignalChangedInfo": {
				"title": "SignalChangedInfo",
				"type": "object",
				"properties": {
					"port": {
						"$ref": "#/components/schemas/HDMIInput.HDMIPortId"
					},
					"signal": {
						"$ref": "#/components/schemas/HDMIInput.HDMISignalStatus"
					}
				},
				"required": [
					"port",
					"signal"
				]
			},
			"HDMIInput.ConnectionChangedInfo": {
				"title": "ConnectionChangedInfo",
				"type": "object",
				"properties": {
					"port": {
						"$ref": "#/components/schemas/HDMIInput.HDMIPortId"
					},
					"connected": {
						"type": "boolean"
					}
				}
			},
			"HDMIInput.AutoLowLatencyModeSignalChangedInfo": {
				"title": "AutoLowLatencyModeSignalChangedInfo",
				"type": "object",
				"properties": {
					"port": {
						"$ref": "#/components/schemas/HDMIInput.HDMIPortId"
					},
					"autoLowLatencyModeSignalled": {
						"type": "boolean"
					}
				}
			},
			"Keyboard.EmailUsage": {
				"title": "EmailUsage",
				"type": "string",
				"enum": [
					"signIn",
					"signUp"
				]
			},
			"Keyboard.KeyboardType": {
				"title": "KeyboardType",
				"type": "string",
				"description": "The type of keyboard to show to the user",
				"enum": [
					"standard",
					"email",
					"password"
				]
			},
			"Keyboard.KeyboardParameters": {
				"title": "KeyboardParameters",
				"type": "object",
				"required": [
					"message"
				],
				"properties": {},
				"examples": [
					{
						"type": "standard",
						"message": "Enter your user name."
					}
				]
			},
			"Keyboard.KeyboardProviderRequest": {
				"title": "KeyboardProviderRequest",
				"type": "object",
				"required": [
					"correlationId",
					"parameters"
				],
				"properties": {
					"correlationId": {
						"type": "string",
						"description": "An id to correlate the provider response with this request"
					},
					"parameters": {
						"description": "The request to start a keyboard session",
						"$ref": "#/components/schemas/Keyboard.KeyboardParameters"
					}
				}
			},
			"Keyboard.KeyboardResult": {
				"title": "KeyboardResult",
				"type": "object",
				"required": [
					"text"
				],
				"properties": {
					"text": {
						"type": "string",
						"description": "The text the user entered into the keyboard"
					},
					"canceled": {
						"type": "boolean",
						"description": "Whether the user canceled entering text before they were finished typing on the keyboard"
					}
				}
			},
			"Lifecycle.LifecycleEvent": {
				"title": "LifecycleEvent",
				"description": "A an object describing the previous and current states",
				"type": "object",
				"required": [
					"state",
					"previous"
				],
				"properties": {
					"state": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/lifecycle#/definitions/LifecycleState",
						"description": "The current lifcycle state"
					},
					"previous": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/lifecycle#/definitions/LifecycleState",
						"description": "The previous lifcycle state"
					},
					"source": {
						"type": "string",
						"enum": [
							"voice",
							"remote"
						],
						"description": "The source of the lifecycle change."
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/lifecycle": {
				"title": "Lifecycle",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/lifecycle",
				"oneOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/lifecycle#/definitions/LifecycleState"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/lifecycle#/definitions/CloseReason"
					}
				],
				"definitions": {
					"LifecycleState": {
						"title": "LifecycleState",
						"description": "The application lifecycle state",
						"type": "string",
						"enum": [
							"initializing",
							"inactive",
							"foreground",
							"background",
							"unloading",
							"suspended"
						]
					},
					"CloseReason": {
						"title": "CloseReason",
						"description": "The application close reason",
						"type": "string",
						"enum": [
							"remoteButton",
							"userExit",
							"done",
							"error"
						]
					}
				}
			},
			"Localization.LatLon": {
				"type": "array",
				"items": [
					{
						"type": "number"
					},
					{
						"type": "number"
					}
				],
				"additionalItems": false,
				"minItems": 2,
				"maxItems": 2
			},
			"Metrics.MediaPosition": {
				"title": "MediaPosition",
				"description": "Represents a position inside playback content, as a decimal percentage (0-0.999) for content with a known duration, or an integer number of seconds (0-86400) for content with an unknown duration.",
				"oneOf": [
					{
						"const": 0
					},
					{
						"type": "number",
						"exclusiveMinimum": 0,
						"exclusiveMaximum": 1
					},
					{
						"type": "integer",
						"minimum": 1,
						"maximum": 86400
					}
				]
			},
			"Metrics.ErrorType": {
				"title": "ErrorType",
				"type": "string",
				"enum": [
					"network",
					"media",
					"restriction",
					"entitlement",
					"other"
				]
			},
			"Metrics.EventObjectPrimitives": {
				"title": "EventObjectPrimitives",
				"anyOf": [
					{
						"type": "string",
						"maxLength": 256
					},
					{
						"type": "number"
					},
					{
						"type": "integer"
					},
					{
						"type": "boolean"
					},
					{
						"type": "null"
					}
				]
			},
			"Metrics.EventObject": {
				"title": "EventObject",
				"type": "object",
				"maxProperties": 256,
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/Metrics.EventObjectPrimitives"
						},
						{
							"type": "array",
							"maxItems": 256,
							"items": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/Metrics.EventObjectPrimitives"
									},
									{
										"$ref": "#/components/schemas/Metrics.EventObject"
									}
								]
							}
						},
						{
							"$ref": "#/components/schemas/Metrics.EventObject"
						}
					]
				}
			},
			"Parameters.AppInitialization": {
				"title": "AppInitialization",
				"type": "object",
				"properties": {
					"us_privacy": {
						"type": "string",
						"description": "The IAB US Privacy string."
					},
					"lmt": {
						"type": "integer",
						"description": "The IAB limit ad tracking opt out value."
					},
					"discovery": {
						"type": "object",
						"properties": {
							"navigateTo": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/NavigationIntent"
							}
						}
					},
					"secondScreen": {
						"type": "object",
						"properties": {
							"launchRequest": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/secondscreen#/definitions/SecondScreenEvent"
							}
						}
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/secondscreen": {
				"title": "SecondScreen",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/secondscreen",
				"anyOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/secondscreen#/definitions/SecondScreenEvent"
					}
				],
				"definitions": {
					"SecondScreenEvent": {
						"title": "SecondScreenEvent",
						"description": "An a message notification from a second screen device",
						"type": "object",
						"required": [
							"type"
						],
						"properties": {
							"type": {
								"type": "string",
								"enum": [
									"dial"
								]
							},
							"version": {
								"type": "string"
							},
							"data": {
								"type": "string"
							}
						}
					}
				}
			},
			"PinChallenge.PinChallenge": {
				"title": "PinChallenge",
				"type": "object",
				"required": [
					"requestor",
					"pinSpace"
				],
				"properties": {}
			},
			"PinChallenge.ChallengeRequestor": {
				"title": "ChallengeRequestor",
				"type": "object",
				"required": [
					"id",
					"name"
				],
				"properties": {
					"id": {
						"type": "string",
						"description": "The id of the app that requested the challenge"
					},
					"name": {
						"type": "string",
						"description": "The name of the app that requested the challenge"
					}
				}
			},
			"PinChallenge.PinChallengeProviderRequest": {
				"title": "PinChallengeProviderRequest",
				"allOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/ProviderRequest"
					},
					{
						"type": "object",
						"required": [
							"parameters"
						],
						"properties": {
							"parameters": {
								"description": "The request to challenge the user",
								"$ref": "#/components/schemas/PinChallenge.PinChallenge"
							}
						}
					}
				]
			},
			"PinChallenge.ResultReason": {
				"title": "ResultReason",
				"type": "string",
				"description": "The reason for the result of challenging the user",
				"enum": [
					"noPinRequired",
					"noPinRequiredWindow",
					"exceededPinFailures",
					"correctPin",
					"cancelled"
				]
			},
			"PinChallenge.PinChallengeResult": {
				"title": "PinChallengeResult",
				"type": "object",
				"required": [
					"granted",
					"reason"
				],
				"properties": {
					"granted": {
						"oneOf": [
							{
								"type": "boolean",
								"description": "Whether the user succeeded in the pin challenge"
							},
							{
								"const": null
							}
						]
					},
					"reason": {
						"$ref": "#/components/schemas/PinChallenge.ResultReason",
						"description": "The reason for the result "
					}
				}
			},
			"Privacy.PrivacySettings": {
				"title": "PrivacySettings",
				"type": "object",
				"required": [
					"allowACRCollection",
					"allowResumePoints",
					"allowAppContentAdTargeting",
					"allowCameraAnalytics",
					"allowPersonalization",
					"allowPrimaryBrowseAdTargeting",
					"allowPrimaryContentAdTargeting",
					"allowProductAnalytics",
					"allowRemoteDiagnostics",
					"allowUnentitledPersonalization",
					"allowUnentitledResumePoints",
					"allowWatchHistory"
				],
				"properties": {
					"allowACRCollection": {
						"description": "",
						"type": "boolean"
					},
					"allowResumePoints": {
						"description": "",
						"type": "boolean"
					},
					"allowAppContentAdTargeting": {
						"description": "",
						"type": "boolean"
					},
					"allowCameraAnalytics": {
						"description": "",
						"type": "boolean"
					},
					"allowPersonalization": {
						"description": "",
						"type": "boolean"
					},
					"allowPrimaryBrowseAdTargeting": {
						"description": "",
						"type": "boolean"
					},
					"allowPrimaryContentAdTargeting": {
						"description": "",
						"type": "boolean"
					},
					"allowProductAnalytics": {
						"description": "",
						"type": "boolean"
					},
					"allowRemoteDiagnostics": {
						"description": "",
						"type": "boolean"
					},
					"allowUnentitledPersonalization": {
						"description": "",
						"type": "boolean"
					},
					"allowUnentitledResumePoints": {
						"description": "",
						"type": "boolean"
					},
					"allowWatchHistory": {
						"description": "",
						"type": "boolean"
					}
				},
				"examples": [
					{
						"allowACRCollection": true,
						"allowResumePoints": false,
						"allowAppContentAdTargeting": false,
						"allowCameraAnalytics": true,
						"allowPersonalization": true,
						"allowPrimaryBrowseAdTargeting": false,
						"allowPrimaryContentAdTargeting": false,
						"allowProductAnalytics": true,
						"allowRemoteDiagnostics": true,
						"allowUnentitledPersonalization": true,
						"allowUnentitledResumePoints": false,
						"allowWatchHistory": true
					}
				]
			},
			"SecureStorage.StorageScope": {
				"title": "StorageScope",
				"type": "string",
				"enum": [
					"device",
					"account"
				],
				"description": "The scope of the data"
			},
			"SecureStorage.StorageOptions": {
				"title": "StorageOptions",
				"type": "object",
				"required": [
					"ttl"
				],
				"properties": {
					"ttl": {
						"type": "number",
						"description": "Seconds from set time before the data expires and is removed"
					}
				}
			},
			"UserGrants.GrantInfo": {
				"description": "Information about a grant given by a user",
				"type": "object",
				"properties": {
					"app": {
						"$ref": "#/components/schemas/UserGrants.AppInfo"
					},
					"state": {
						"$ref": "#/components/schemas/UserGrants.GrantState"
					},
					"capability": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					},
					"role": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Role"
					},
					"lifespan": {
						"type": "string",
						"enum": [
							"once",
							"forever",
							"appActive",
							"powerActive",
							"seconds"
						]
					},
					"expires": {
						"type": "string",
						"format": "date-time"
					}
				},
				"additionalProperties": false,
				"required": [
					"state",
					"capability",
					"role",
					"lifespan"
				],
				"examples": [
					{
						"app": {
							"id": "certapp",
							"title": "Firebolt Certification"
						},
						"state": "granted",
						"capability": "xrn:firebolt:capability:data:app-usage",
						"role": "use",
						"lifespan": "seconds",
						"expires": "2022-12-14T20:20:39+00:00"
					}
				]
			},
			"UserGrants.AppInfo": {
				"description": "Information about an app that a grant was for",
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"title": {
						"type": "string"
					}
				},
				"additionalProperties": false,
				"required": [
					"id"
				]
			},
			"UserGrants.GrantState": {
				"description": "The state the grant is in",
				"type": "string",
				"enum": [
					"granted",
					"denied"
				]
			},
			"UserGrants.GrantModificationOptions": {
				"description": "Options when modifying any grant",
				"type": "object",
				"properties": {
					"appId": {
						"type": "string"
					}
				},
				"additionalProperties": false,
				"required": []
			},
			"UserGrants.RequestOptions": {
				"title": "RequestOptions",
				"type": "object",
				"properties": {
					"force": {
						"type": "boolean",
						"description": "Whether to force for user grant even if the previous decision stored"
					}
				}
			},
			"Wifi.AccessPointList": {
				"title": "AccessPointList",
				"type": "object",
				"description": "List of scanned Wifi networks available near the device.",
				"properties": {
					"list": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Wifi.AccessPoint"
						}
					}
				}
			},
			"Wifi.WifiSecurityMode": {
				"title": "WifiSecurityMode",
				"description": "Security Mode supported for Wifi",
				"type": "string",
				"enum": [
					"none",
					"wep64",
					"wep128",
					"wpaPskTkip",
					"wpaPskAes",
					"wpa2PskTkip",
					"wpa2PskAes",
					"wpaEnterpriseTkip",
					"wpaEnterpriseAes",
					"wpa2EnterpriseTkip",
					"wpa2EnterpriseAes",
					"wpa2Psk",
					"wpa2Enterprise",
					"wpa3PskAes",
					"wpa3Sae"
				]
			},
			"Wifi.WifiSignalStrength": {
				"title": "WifiSignalStrength",
				"description": "Strength of Wifi signal, value is negative based on RSSI specification.",
				"type": "integer",
				"default": -255,
				"minimum": -255,
				"maximum": 0
			},
			"Wifi.WifiFrequency": {
				"title": "WifiFrequency",
				"description": "Wifi Frequency in Ghz, example 2.4Ghz and 5Ghz.",
				"type": "number",
				"default": 0,
				"minimum": 0
			},
			"Wifi.AccessPoint": {
				"title": "AccessPoint",
				"description": "Properties of a scanned wifi list item.",
				"type": "object",
				"properties": {
					"ssid": {
						"type": "string",
						"description": "Name of the wifi."
					},
					"securityMode": {
						"$ref": "#/components/schemas/Wifi.WifiSecurityMode"
					},
					"signalStrength": {
						"$ref": "#/components/schemas/Wifi.WifiSignalStrength"
					},
					"frequency": {
						"$ref": "#/components/schemas/Wifi.WifiFrequency"
					}
				}
			},
			"Wifi.WPSSecurityPin": {
				"title": "WPSSecurityPin",
				"description": "Security pin type for WPS(Wifi Protected Setup).",
				"type": "string",
				"enum": [
					"pushButton",
					"pin",
					"manufacturerPin"
				]
			},
			"Wifi.WifiConnectRequest": {
				"title": "WifiConnectRequest",
				"description": "Request object for the wifi connection.",
				"type": "object",
				"properties": {
					"ssid": {
						"schema": {
							"type": "string"
						}
					},
					"passphrase": {
						"schema": {
							"type": "string"
						}
					},
					"securityMode": {
						"schema": {
							"$ref": "#/components/schemas/Wifi.WifiSecurityMode"
						}
					},
					"timeout": {
						"schema": {
							"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/Timeout"
						}
					}
				}
			},
			"HDMIInput.AutoLowLatencyModeCapableChangedInfo": {
				"title": "AutoLowLatencyModeCapableChangedInfo",
				"type": "object",
				"properties": {
					"port": {
						"$ref": "#/components/schemas/HDMIInput.HDMIPortId"
					},
					"enabled": {
						"type": "boolean"
					}
				},
				"required": [
					"port",
					"enabled"
				]
			}
		}
	}
}